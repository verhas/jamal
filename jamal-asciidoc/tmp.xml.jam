{%@sep 〔 〕%}〔@define VERSION=1〕
〔@comment This is a definition for the Jamal live macro templates for IntelliJ〕
〔@define template($name,$content,$desc,$variables)=
<template name="jm-$name" value="{%〔#if /〔@string:startsWith/$content/#〕//@〕〔@replace /$content/\n/&#10;〕%}" description="$desc" toReformat="false" toShortenFQNames="true">
$variables
<context>
<option name="AsciiDoc" value="true" />
</context>
</template>
〕
〔@define variable($name,$default)=<variable name="$name" expression="〔@replace `///`$default///"///&quot;〕" alwaysStopAt="true" />〕\

<templateSet group="Jamal">



〔template |begin|begin $M$|mark the beginning of a named or anonymous block|
〔variable |M|"[marker]"〕
〕
〔template |block|#block [$O$] $C$|enclose the content into a block|
〔variable |O|"flat"〕
〔variable |C|"..."〕
〕
〔template |catch|catch $C$|catch an error|
〔variable |C|"..."〕
〕
〔template |comment|comment $C$|Comment out the content|
〔variable |C|"..."〕
〕
〔template |debug|debug $O$|Switch operation to debug mode|
〔variable |O|"on off noDebug lenient using"〕
〕
〔template |defer|defer [$O$] $C|defer evaluation of content after the document was processed|
〔variable |O|"$input $output"〕
〔variable |C|"..."〕
〕
〔template |define|define [$O$]$M$($P$)=$V$|Define a Jamal user defined macro|
〔variable |O|"verbatim tail optional fail pure global export class"〕
〔variable |M|"MACRO_NAME"〕
〔variable |P|"$p1,$p2,..."〕
〔variable |V|"..."〕
〕
〔template |end|end $M$|mark the end of a named or anonymous block|
〔variable |M|"[marker]"〕
〕
〔template |env|env $P$ $C$|get the value of an environment variable|
〔variable |P|enum("?","!","")〕
〔variable |C|"..."〕
〕
〔template |escape|escape$S$ `$P$`$C$`$P$`|escape the evaluation of the content|
〔variable |S|enum("*","")〕
〔variable |P|"..."〕
〔variable |C|"..."〕
〕
〔template |eval|eval/$S$ $C$|evaluate the content as script|
〔variable |S|"script"〕
〔variable |C|"..."〕
〕
〔template |export|export $C$|export the macro one level up|
〔variable |C|"m1, m2, m3"〕
〕
〔template |for|for [$O$]($A$) in ($V$)=$C$|repeat the content with different values|
〔variable :O:"$forsep=, $forsubsep=| trim skipEmpty lenient evalist"〕
〔variable |A|"$a, $b, $c"〕
〔variable :V:"a1|a2|a3,b1|b2|b3,c1|c2|c3"〕
〔variable |C|"..."〕
〕
〔template |ident|ident $C$|return the content without evaluation|
〔variable |C|"..."〕
〕
〔template |if|if [$O$] /$C$/$T$/$E$|If statement|
〔variable |O|"not empty blank and or defined global local lessThan greaterThan equals"〕
〔variable |C|"CONDITION"〕
〔variable |T|"THEN"〕
〔variable |E|"ELSE"〕
〕
〔template |import|import [$O$] $F$|import definitions from the file|
〔variable |O|"top noCache"〕
〔variable |F|fileRelativePath()〕
〕
〔template |include|include [$O$] $F$|include a file|
〔variable |O|"top noCache verbatim lines=m..n"〕
〔variable |F|fileRelativePath()〕
〕
〔template |JShell|JShell $E$|define script for the JShell engine|
〔variable |E|"..."〕
〕
〔template |log|log [$O$] $C$|log a message|
〔variable |O|"log=info"〕
〔variable |C|"..."〕
〕
〔template |macro|macro [type=$T$ $O$] $C$|reference a macro with irregular name|
〔variable :T:enum("","userdefined","builtin")〕
〔variable :O:"alias="" global"〕
〔variable |C|"macro-name"〕
〕
〔template |options|options [$R$] $C$|set, reset, push or pop options|
〔variable |R|enum("push","pop","set")〕
〔variable |C|"o1  ~o2"〕
〕
〔template |require|require $R$ $V$|require a certain version of Jamal|
〔variable |R|enum("&lt;=","&lt;","=","&gt;=","&gt;")〕
〔variable |V|"〔VERSION〕"〕
〕
〔template |script|script$SL$ $E$|execute script|
〔variable |E|"..."〕
〔variable :SL:"/script_lang〕
〕
〔template |sep|sep $O$ $C$|define opening and closing string|
〔variable |O|"〔!"〕
〔variable |C|"!〕"〕
〕
〔template |try|try$M$$C$|define opening and closing string|
〔variable |M|enum("","!","?")〕
〔variable |C|"..."〕
〕
〔template |undefine|undefine $C$|undefine a macro|
〔variable |C|"macro_name"〕
〕
〔template |use|use  [$O$] $C$ $ALI$|use a class as macro|
〔variable |O|"global"〕
〔variable |ALI|"as alias"〕
〔variable |C|"com.package.name.MacroClass"〕
〕