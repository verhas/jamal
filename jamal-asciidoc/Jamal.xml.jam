{%@import ../version.jim%}
{%@define asciidoc:output=live-templates/templates/Jamal.xml%}
{%@sep 〔 〕%}
〔@comment This is a definition for the Jamal live macro templates for IntelliJ〕
〔@define template($name,$content,$desc,$variables)=
<template name="jm-$name" value="{%〔#if /〔@string:startsWith/$content/#〕//@〕〔@replace /$content/\n/&#10;〕%}" description="$desc" toReformat="false" toShortenFQNames="true">
$variables
<context>
<option name="AsciiDoc" value="true" />
</context>
</template>
〕
〔@define variable($name,$default)=<variable name="$name" expression="〔@replace `///`$default///"///&quot;〕" alwaysStopAt="true" />〕\

<templateSet group="Jamal">
〔@comment
The templates are usually at the end of the Java source code file, start with
/*template template-name
and end with the Java end comment after the last line of the template
*/

The templates should use '{' and '}' as macro open and close strings.
These will be replaced to the one used here before they get evaluated.

〕

〔@snip:collect from="../jamal-core/src/main/java" start="/\\*template\\s+([a-zA-Z0-9_$]+)" stop="\\*/"〕
〔@snip:collect from="../jamal-snippet/src/main/java" start="/\\*template\\s+([a-zA-Z0-9_$]+)" stop="\\*/"〕
〔@snip:collect from="../jamal-xls/src/main/java" start="/\\*template\\s+([a-zA-Z0-9_$]+)" stop="\\*/"〕


〔!#replace `/%/`〔@snip (poly) jm_.*〕/%/{/%/〔@escape`.`〔`.`〕/%/}/%/〔@escape`.`〕`.`〕〕





〔template |directory|directory ($O$) $F$|check the existence of directory and format|
  〔variable |O|"format=... root=..."〕
  〔variable |F|fileRelativePath()〕
〕

〔@define FORMAT=$name $absolutePath $parent $simpleName $canonicalPath $bareNaked $naked1 $naked2 $naked3 $naked4 $naked5 $extensions $extension1 $extension2 $extension3 $extension4 $extension5〕
〔template |file|file ($O$) $F$|check the existence of file and format|
  〔variable |O|" root=... format=〔FORMAT〕"〕
  〔variable |F|fileRelativePath()〕
〕

〔template |format|format /$F$/$P1$/$P2/$P3$|format parameters|
  〔variable |F|"%d %s"〕
  〔variable |P1|"..."〕
  〔variable |P2|"..."〕
  〔variable |P3|"..."〕
〕

〔template |hashCode|hashCode|calculate the hash code of the input|
〕

〔@define FORMAT=$simpleName $name $canonicalName $packageName $typeName 〕
〔template |class|java:class ($O$) $C$|format the name of a class|
  〔variable |O|"format=〔FORMAT〕"〕
  〔variable |C|"com.mymy.Class"〕
〕

〔@define FORMAT=$name $classSimpleName $className $classCanonicalName $classTypeName $packageName $typeClass $modifiers $value 〕
〔template |field|java:field ($O$) $C$|format the name of a field|
  〔variable |O|"format=〔FORMAT〕"〕
  〔variable |C|"com.mymy.Class#field"〕
〕

〔@define FORMAT=$name $classSimpleName $className $classCanonicalName $classTypeName $packageName $typeClass $modifiers $value〕
〔template |method|java:method ($O$) $C$|format the name of a method|
  〔variable |O|"format=〔FORMAT〕"〕
  〔variable |C|"com.mymy.Class#method"〕
〕

〔template |java:insert|java:insert $O$ \n\n $C$|insert Java code into Java source|
  〔variable |O|"to id check failOnUpdate"〕
  〔variable |C|"..."〕
〕

〔template |java:template|java:template $O$ \n\n $C$|insert Java code into Java source|
  〔variable |O|"path template check debug apply failOnUpdate"〕
  〔variable |C|"..."〕
〕

〔template |filterLines|filterLines $O$ \n\n $C$|filter lines out of the content|
  〔variable :O:"keep kill|pattern=..."〕
  〔variable |C|"..."〕
〕

〔template |lineCount|lineCount  $C$|count the lines|
  〔variable :O:"keep kill|pattern=..."〕
  〔variable |C|"..."〕
〕

〔template |listDir|listDir ($O$) $D$|count the lines|
  〔variable :O:"format separator grep pattern maxDepth followSymlinks countOnly"〕
  〔variable |D|fileRelativePath()〕
〕

〔template |memoize|memoize ($O$) $C$|memoize the result of the content execution|
  〔variable |O|"file hashFile hashCode"〕
  〔variable |C|"..."〕
〕

〔template |numberLines|numberLines $O$ \n\n $C$|number the lines|
  〔variable |O|"format start step"〕
  〔variable |C|"..."〕
〕

〔template |numbers|numbers $O$|create comma separated number list|
  〔variable |O|"start end step"〕
〕

〔template |pos|pos $O$|file line column position|
  〔variable |O|"top parent all format up sep"〕
〕

〔template |range|range $O$ \n\n $C$|select ranges from the input|
  〔variable :O:"lines=n..m,k..l"〕
  〔variable |C|"..."〕
〕

〔template |ref|ref $ID$ $REF$|define a referenced macro|
  〔variable :ID:"..."〕
  〔variable |REF|"> xrefs"〕
〕

〔template |references|references $O$|declare the reference repository|
  〔variable :O:"file= holder=xrefs"〕
  〔variable |REF|"> xrefs"〕
〕

〔template |reflow|reflow $O$|reflow the text|
  〔variable :O:"width=n"〕
〕

〔template |shell:var|shell:var (variables=&quot;&quot;&quot;\nv1_...\nv2=...\n...&quot;&quot;&quot;) $C$|handle shell variable syntax|
  〔variable |C|"..."〕
〕

〔template |skipLines|slipLines $O$ \n $C$|skip lines|
  〔variable |O|"skip= endSkip="〕
  〔variable |C|"..."〕
〕

〔template |snip|snip ($O$) $C$|snippet|
  〔variable |O|"poly hash="〕
  〔variable |C|"snippet_name"〕
〕


〔template |snip:check|snip:check $O$|check snippet consistency|
 〔variable |O|"hash= lines= id= file= message= warning error"〕
〕

〔template |snip:file|snip:file $C$|get the file name of the snippet|
 〔variable |C|"snippet_name"〕
〕

〔template |snip:line|snip:line $C$|get the line number of the snippet|
 〔variable |C|"snippet_name"〕
〕

〔template |snip:list|snip:list $O$|list selected snippets|
 〔variable |O|"id=.* file=.* text=.* listSeparator=,"〕
〕

〔template |snip:load|snip:load $O$|load snippets|
 〔variable |O|"id=.* file=.* text=.* input="〕
〕

〔template |snip:define|snip:define $S$=$C$|define a snippet snippets|
  〔variable :S:"snippet_name"〕
  〔variable |C|"..."〕
〕

〔template |snip:properties|snip:properties $F$|load snippets from properties file|
  〔variable |F|fileRelativePath()〕
〕

〔template |snip:save|snip:save $O$|save snippets|
  〔variable |O|"id=.* file=.* text=.* output= tab=n"〕
〕

〔template |snip:transform|snip:transform $A$ $O$ \n $C$|transform snippets|
  〔variable |A|"actions=kill,skip,replace,trim,reflow,number,untab,range"〕
  〔variable |O|"pattern=.* keep format=%2d start=n step=n width=n replace=... detectNoChange skip=... endSkip=... margin=n trimVertical verticalTrimOnly tabSize=n range=n...m"〕
  〔variable |C|"..."〕
〕

〔template |snip:xml|snip:xml $V$=$F$|load xml from file|
  〔variable |V|"name"〕
  〔variable |F|fileRelativePath()〕
〕

〔template |sort|sort $O$ \n $C$|sort the lines|
〔variable |O|"separator=... join=... locale=UTF-8 columns=n..m pattern=.* numeric reverse"〕
〔variable |C|"..."〕
〕

〔template |string:chop|string:chop ($O$) $C$|chop off the start/end|
  〔variable |O|"prefix=... postfix=... ignoreCase"〕
  〔variable |C|"..."〕
〕

〔template |string:contains|string:contains ($O$) $C$|chop off the start/end|
  〔variable |O|"text=... regex"〕
  〔variable |C|"..."〕
〕

〔template |string:endsWith|string:endsWith /$FX$/$C$|true if string ends with|
  〔variable |FX|"..postfix.."〕
  〔variable |C|"..."〕
〕

〔template |string:startsWith|string:startsWith /$FX$/$C$|true if string starts with|
  〔variable |FX|"..prefix.."〕
  〔variable |C|"..."〕
〕

〔template |string:equals|string:equals ($O$) /$A$/$B$|test string equality|
  〔variable |O|"ignoreCase"〕
  〔variable |A|"..."〕
  〔variable |B|"..."〕
〕

〔template |string:length|string:length ($O$) $A$|string length|
  〔variable |O|"trim left right"〕
  〔variable |A|"..."〕
〕

〔template |string:quote|string:quote $A$|quote a string|
  〔variable |A|"..."〕
〕

〔template |string:reverse|string:reverse $A$|reverse a string|
  〔variable |A|"..."〕
〕

〔template |string:substring|string:substring ($O$) $A$|substring|
  〔variable |O|"begin=n end=m"〕
  〔variable |A|"..."〕
〕

〔template |thinXml|thinXml $C$|convert thinXML to XML|
  〔variable |C|"..."〕
〕

〔template |trimLines|trimLines $O$ \n $C$|trim lines|
  〔variable |O|"margin=n verticalTrimOnly trimVertical"〕
  〔variable |C|"..."〕
〕

〔template |unicode|unicode $C$|convert character from unicode|
  〔variable |C|"&amp;#xNM"〕
〕

〔template |untab|untab $O$ \n $C$|replace tab with spaces|
〔variable |O|"tab=n"〕
〔variable |C|"..."〕
〕

〔template |urlEncode|urlEncode ($O$) $C$|replace tab with spaces|
〔variable |O|"charset=UTF-8"〕
〔variable |C|"..."〕
〕

〔template |xmlFormat|xmlFormat ($O$) \n $C$|replace tab with spaces|
〔variable |O|"tabsize=n thin wrong"〕
〔variable |C|"..."〕
〕

〔template |xml:insert|xml:insert ($O$) $C$|replace tab with spaces|
〔variable |O|"path=... id=... optional tabsize=4"〕
〔variable |C|"..."〕
〕

〔template |do|do $O$ \n $C$|use basic syntax|
〔variable |O|"stepLimit=10000"〕
〔variable |C|"..."〕
〕

〔template |expression|expression $C$|evaluate expression|
〔variable |C|"..."〕
〕

〔template |maven:load|maven:load ($O$) $C$|load macros from maven repo|
〔variable |O|"repo=... noDependencies reload local=... exclude=..."〕
〔variable |C|"groupId:artifactId:version"〕
〕

〔template |json:define|json:define ($O$)$M$=$C$|define a JSON structure|
〔variable |O|enum("jsonl","")〕
〔variable |M|"name"〕
〔variable |C|"json content"〕
〕

〔template |json:get|json:get $M$/$C$|get data from JSON|
〔variable |M|"json macro name"〕
〔variable |C|"JSON pointer"〕
〕

〔template |json:length|json:length $M$/$C$|get length of a JSON array|
〔variable |M|"json macro name"〕
〔variable |C|"JSON pointer"〕
〕

〔template |json:keys|json:keys $M$/$C$|get the keys of a JSON Object|
〔variable |M|"json macro name"〕
〔variable |C|"JSON pointer"〕
〕

〔template |json:set|json:set $M$/$C$/$K$=$V$|set data to JSON|
〔variable |M|"json macro name"〕
〔variable |C|"JSON pointer"〕
〔variable |K|"key"〕
〔variable |V|"..."〕
〕

〔template |mock|mock ($O$) $I$ \n $C$|mock a built-in macro|
〔variable |O|"macro=... when=.* repeat=n inf"〕
〔variable |I|"xyz.svg"〕
〔variable |C|"..."〕
〕

〔template |yaml:define|yaml:define $YAMLNAME$=$YAMLCONTENT$|define a yaml structure|
〔variable |YAMLNAME|"..."〕
〔variable |YAMLCONTENT|"..."〕
〕

〔template |yaml:resolve|yaml:resolve ($O$) $N$|resolve a yaml structure|
〔variable |O|"clone copy"〕
〔variable |N|"..."〕
〕

〔template |yaml:isResolved|yaml:isResolved $N$|true if resolved|
〔variable |O|"clone copy"〕
〔variable |N|"..."〕
〕

〔template |yaml:get|yaml:get (from=$Y$) $OGNL$|true if resolved|
〔variable |Y|"..."〕
〔variable |OGNL|"x.y[2].z..."〕
〕

〔template |yaml:set|yaml:set ($Y$) $M$=$OGNL$|define a yaml pointing to another|
〔variable |Y|"clone copy from=..."〕
〔variable |M|"..."〕
〔variable |OGNL|"x.y[2].z..."〕
〕

〔template |yaml:add|yaml:add $T$ $K$ $F$\n $Y$|add a substructure|
〔variable |T|"to=..."〕
〔variable |K|"key=..."〕
〔variable |F|"flat=..."〕
〔variable |Y|"..."〕
〕


〔template |yaml:format|yaml:format $O$|format options for the output|
〔variable :O:"allowUnicode canonical explicitEnd explicitStart prettyFlow splitLines flowStyle=FLOW|BLOCK|AUTO scalarStyle=DOUBLE_QUOTED|SINGLE_QUOTED|LITERAL|FOLDED|PLAIN lineBreak indent=4 indicatorIndent width=80"〕
〕

〔template |yaml:dump|yaml:dump $O$ $M$ to $F$|save to file|
〔variable |M|"..."〕
〔variable |O|enum("(clone)","")〕
〔variable |F|fileRelativePath()〕
〕

〔template |yaml:xml|yaml:xml ($O$) $M$|convert to XML|
〔variable |M|"..."〕
〔variable |O|"tag attributes"〕
〕

〔template |yaml:output|yaml:output $M$|set the output|
〔variable |M|"..."〕
〕

</templateSet>
〔@xmlFormat ()〕