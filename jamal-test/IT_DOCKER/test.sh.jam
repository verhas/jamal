#!/bin/sh
# {%@rot13 QB ABG RQVG %}
#
# This shell script prepares the docker container and other scrips needed to execute the intergration tests.
# At the end, it starts the docker container, which will start the script integrationtest.
#
set -e

#
# The directory where we will extract the Jamal JAR files so that we can execute jamal on the
# script files needed to execute the integration test.
#
LIB_DIR=".lib"
rm -rf "$LIB_DIR"
mkdir "$LIB_DIR"
unzip -q "{%@dev:root%}/jamal-cmd/target/jamal-cmd-2.8.3-SNAPSHOT-distribution.zip" -d "$LIB_DIR"

#
# Calxculate the classpath
#
CLASSPATH=$(find "$LIB_DIR" -name "*.jar" | tr '\n' ':')

#
# create the jamal.sh script to execute jamal
#
cat > jamal.sh <<END
#!/bin/sh
java -cp "$CLASSPATH" javax0.jamal.cmd.JamalMain "\$@"
END

chmod u+rx ./jamal.sh

./jamal.sh -T7 integrationtest.jam integrationtest

#
# Cleaning up the local jamal.sh and the classpath that was used to compule the integration test
#
rm -rf "$LIB_DIR"
rm jamal.sh

#
# Create the dockerfile
#
cat > Dockerfile <<END
FROM alpine
RUN apk update
RUN apk add --no-cache openjdk17 maven git python3 py3-pip
RUN addgroup TESTGROUP
RUN adduser -G TESTGROUP -D -s /bin/bash jamal

WORKDIR /home/jamal
COPY integrationtest .
RUN chown jamal:TESTGROUP integrationtest
RUN chmod u+xr integrationtest
USER jamal
RUN mkdir -p /home/jamal/.m2/repository
RUN chmod u+xr /home/jamal/.m2/repository
CMD ./integrationtest
END

#
# Build the docker image
#
docker build -t jamal-test .
rm Dockerfile
if [ $? -ne 0 ]; then
  echo "Docker build failed. Exiting."
  exit 1
fi

#
# Run the integration test
#
docker run -it jamal-test
