#!/bin/bash

STEP=1
JAMAL_HOME="/home/jamal"

print_step() {
    echo "Step $STEP: $1"
    STEP=$((STEP + 1))
}

check_docker_env() {
    print_step "Checking if running inside a Docker container"
    if [[ -f /.dockerenv || -n "${container}" ]]; then
        echo "Running inside a Docker container."
    else
        echo "Warning: This script is designed to run inside a Docker container. Do not run it outside."
        echo "To execute the integration test start the do run ./test.sh"
        exit 1
    fi
}

validate_working_directory() {
    print_step "Validating working directory"
    cd || exit
    if [[ "$(pwd)" != "$JAMAL_HOME" || ! -d "$JAMAL_HOME" ]]; then
        echo "Error: Current directory is not $JAMAL_HOME or it does not exist."
        exit 1
    fi
}

setup_repository() {
    print_step "Creating the local repo directory"
    rm -rf "$JAMAL_HOME/.m2"
    mkdir -p "$JAMAL_HOME/.m2/repository"

    # clone the repository if it is not there
    if [[ ! -e jamal ]]; then
        print_step "Cloning the latest version from GitHub"
        git clone https://github.com/verhas/jamal.git
    fi

    print_step "Building Jamal"
    cd "$JAMAL_HOME/jamal" || exit 1
    # this test rins only on source that was already compiled, there is need fpr the unit tests
    mvn -Dmaven.test.skip=true clean install || { echo "Maven compilation failed"; exit 1; }
}

extract_version() {
    print_step "Extracting version from pom.xml"
    cd "$JAMAL_HOME/jamal" || exit 1
    VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    echo "Extracted version: $VERSION"
}

run_tests() {
    local file_perm="$1"
    local test_type="$2"

    chmod "$file_perm" "$JAMAL_HOME/.jamal/settings.properties"
    chmod 0500 "$JAMAL_HOME/.jamal"
    if ! mvn test -Dtest="$test_type"; then
        echo "TEST $test_type FAILED with chmod $file_perm"
        exit 1
    fi
}

setup_jamal_config() {
    print_step "Creating the configuration directory"
    mkdir -p "$JAMAL_HOME/.jamal"

    print_step "Configuring Jamal"
    cat <<EOT > "$JAMAL_HOME/.jamal/settings.properties"
testproperty=Peter Verhas' macbook
graphviz=/usr/local/bin/dot
maven.load.repo=https://repo1.maven.org/maven2/
maven.load.local=.m2/repository
maven.load.include=com.javax0.jamal:jamal-test:*
maven.load.exclude=.com.javax0.jamal:jamal-api:*
EOT
}

test_security_permissions() {
    print_step "Testing security permissions"
    cd "$JAMAL_HOME/jamal/jamal-maven-load" || exit
    local permissions=(0777 0707 0770 0700 0600 0400)
    local test_secure="javax0.jamal.maven.load.Integration_ConfigurationSecure"
    local test_not_secure="javax0.jamal.maven.load.Integration_ConfigurationNotSecure"

    for perm in "${permissions[@]}"; do
        test_case=$([ "$perm" -eq 0600 ] || [ "$perm" -eq 0400 ] && echo "$test_secure" || echo "$test_not_secure")
        run_tests "$perm" "$test_case"
    done
}

delete_old_jars() {
    print_step "Deleting JARs downloaded by the tests"
    REPO="$JAMAL_HOME/.m2/repository/"
    BASE_PATH="$REPO/com/javax0/jamal"
    for dir in "$BASE_PATH"/*/*; do
        [[ -d "$dir" && "$(basename "$dir")" != "$VERSION" ]] && rm -rf "$dir"
    done
    find "$BASE_PATH" -type f \( -name "*-javadoc.jar" -o -name "*-sources.jar" \) -exec rm -f {} +
    rm -rf $REPO/org/codehaus/groovy/groovy/3.0.12
    rm -rf $REPO/org/codehaus/groovy/groovy-jsr223/3.0.12/
}

calculate_classpath() {
    print_step "Calculating the CLASSPATH"
    CLASSPATH=$(find "$JAMAL_HOME/.m2/repository" -name "*.jar" | tr '\n' ':')
    JAMAL="java -cp \"$CLASSPATH\" javax0.jamal.cmd.JamalMain"
    echo "Jamal command is $JAMAL"
}

run_script_test() {
    local LANG="$1"
    local SCRIPT="$2"
    local RESULT="$3"

    echo "$SCRIPT" > test_$LANG.txt.jam
    if [ ! -e test_$LANG.txt.jam ]; then
        echo "test_$LANG.txt.jam was not created"
        exit 1
    fi
    echo "$RESULT" > test_$LANG.txt
    if [ ! -e test_$LANG.txt ]; then
        echo "test_$LANG.txt was not created"
        exit 1
    fi

    if [ -e ".$LANG.sentinel" ]; then
      chnod 0777 ".$LANG.sentinel"
      rm ".$LANG.sentinel" || (echo "could not delete sentinel file" && exit 1)
    fi

    # shellcheck disable=SC2090
    $JAMAL test_$LANG.txt.jam test_$LANG.test

    if [ -e test_$LANG.test ]; then
        echo "FAIL: test_$LANG.test was created w/o sentinel file"
        exit 1
    fi

    touch ".$LANG.sentinel"

    # shellcheck disable=SC2090
    $JAMAL test_$LANG.txt.jam test_$LANG.test

    if [ -e test_$LANG.test ]; then
        echo "FAIL: test_$LANG.test was created with insecure sentinel file"
        exit 1
    fi

    # securing the sentinel file
    chmod 0400 ".$LANG.sentinel"

    # shellcheck disable=SC2090
    $JAMAL test_$LANG.txt.jam test_$LANG.test

    if [ ! -e test_$LANG.test ]; then
        echo "test_$LANG.test was not created"
        exit 1
    fi

    if [ "$(diff -b test_$LANG.txt test_$LANG.test)" ] ;then
        echo "Jamal via SHELL created different output"
        diff -b test_$LANG.txt test_$LANG.test
        exit 1
    else
       echo "$LANG test successful"
    fi
}

# shellcheck disable=SC2090
run_python_tests() {
      cat << 'END' > test_py.txt.jam
{@python
def Hello(me):
    print(f"hello {me}", end='')
}{@hello You}
END
      echo -n 'Hello, You!' > test_py.txt
      $JAMAL test_py.txt.jam test_py.test
      if [[ -e test_py.test ]]; then
          echo "FAIL: test_py.test was created w/o sentinel file"
          exit 1
      else
          echo "Python does not run without sentinel file. Great."
      fi
      touch .python.sentinel
      $JAMAL test_py.txt.jam test_py.test
      if [[ -e test_py.test ]]; then
          echo "FAIL: test_py.test was created insecure"
          exit 1
      else
          echo "Python does not run with insecure sentinel file. Great."
      fi

      chmod 0400 .python.sentinel
      $JAMAL test_py.txt.jam test_py.test
      if [[ ! -e test_py.test ]]; then
          echo "FAIL: test_py.test was not created"
          exit 1
      else
          echo "Python runs with sentinel file. Great."
      fi

      if [ "$(diff -b test_py.txt test_py.test)" ] ;then
          echo "FAIL: Python created different output"
          diff -b test_py.txt test_py.test
          exit 1
      else
         echo "py test successful"
      fi
}

# shellcheck disable=SC2090
test_python_venv(){
      cd || exit 1
      mkdir python_venv_test || exit 1
      cd python_venv_test || exit 1
      echo "Creating the virtual environment"
      python -m venv ./venv
      echo "activating virtual environment"
      source venv/bin/activate
      echo "Installing rich using pip"
      pip install rich

      cat << 'END' > test_venv.txt.jam
{@python (execute directory=".")
import sys

try:
    import rich
    print("VENV OK")  # Confirms that the script runs inside the virtual environment
except ImportError:
    print("FAIL: VENV NOT OK")  # This will appear if the virtual environment is not active
    print("Python executable:", sys.executable)  # Prints which Python is used
}
END
      cat << 'END' > test_venv.txt
VENV OK
END
      touch .python.sentinel
      chmod 0400 .python.sentinel
      $JAMAL test_venv.txt.jam test_venv.test
      if [[ ! -e test_venv.test ]]; then
        echo "test_venv.test was not created"
      fi
      if [ "$(diff -b test_venv.txt test_venv.test)" ] ;then
        echo "FAIL: Python venv created different output"
        diff -b test_py.txt test_py.test
        exit 1
      else
        echo "venv test successful"
      fi
}

# shellcheck disable=SC2090
main() {
    check_docker_env
    validate_working_directory
    setup_repository
    extract_version
    setup_jamal_config
    test_security_permissions
    delete_old_jars
    calculate_classpath
    run_script_test ruby '{@ruby:eval 1+1}' 2
    run_script_test groovy '{@groovy:eval 1+1}' 2
    run_script_test basic '{@import res:scriptbasic.jim}{expr 1+1}' 2
    run_python_tests
    test_python_venv

    print_step "INTEGRATION TEST SUCCESSFUL"
}

main
