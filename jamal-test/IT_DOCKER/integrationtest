#!/bin/bash

STEP=1
JAMAL_HOME="/home/jamal"

print_step() {
    echo "Step $STEP: $1"
    STEP=$((STEP + 1))
}

check_docker_env() {
    print_step "Checking if running inside a Docker container"
    if [[ -f /.dockerenv || -n "${container}" ]]; then
        echo "Running inside a Docker container."
    else
        echo "Warning: This script is designed to run inside a Docker container. Do not run it outside."
        echo "To execute the integration test start the do run ./test.sh"
        exit 1
    fi
}

validate_working_directory() {
    print_step "Validating working directory"
    cd || exit
    if [[ "$(pwd)" != "$JAMAL_HOME" || ! -d "$JAMAL_HOME" ]]; then
        echo "Error: Current directory is not $JAMAL_HOME or it does not exist."
        exit 1
    fi
}

setup_repository() {
    print_step "Creating the local repo directory"
    rm -rf "$JAMAL_HOME/.m2"
    mkdir -p "$JAMAL_HOME/.m2/repository"

    print_step "Cloning the latest version from GitHub"
    git clone https://github.com/verhas/jamal.git

    print_step "Building Jamal"
    cd "$JAMAL_HOME/jamal" || exit 1
    mvn clean install || { echo "Maven compilation failed"; exit 1; }
}

extract_version() {
    print_step "Extracting version from pom.xml"
    cd "$JAMAL_HOME/jamal" || exit 1
    VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    echo "Extracted version: $VERSION"
}

run_tests() {
    local file_perm="$1"
    local test_type="$2"

    chmod "$file_perm" "$JAMAL_HOME/.jamal/settings.properties"
    chmod 0500 "$JAMAL_HOME/.jamal"
    if ! mvn test -Dtest="$test_type"; then
        echo "TEST $test_type FAILED with chmod $file_perm"
        exit 1
    fi
}

setup_jamal_config() {
    print_step "Creating the configuration directory"
    mkdir -p "$JAMAL_HOME/.jamal"

    print_step "Configuring Jamal"
    cat <<EOT > "$JAMAL_HOME/.jamal/settings.properties"
testproperty=Peter Verhas' macbook
graphviz=/usr/local/bin/dot
maven.load.repo=https://repo1.maven.org/maven2/
maven.load.local=.m2/repository
maven.load.include=com.javax0.jamal:jamal-test:*
maven.load.exclude=.com.javax0.jamal:jamal-api:*
EOT
}

test_security_permissions() {
    print_step "Testing security permissions"
    cd "$JAMAL_HOME/jamal/jamal-maven-load" || exit
    local permissions=(0777 0707 0770 0700 0600 0400)
    local test_secure="javax0.jamal.maven.load.Integration_ConfigurationSecure"
    local test_not_secure="javax0.jamal.maven.load.Integration_ConfigurationNotSecure"

    for perm in "${permissions[@]}"; do
        test_case=$([ "$perm" -eq 0600 ] || [ "$perm" -eq 0400 ] && echo "$test_secure" || echo "$test_not_secure")
        run_tests "$perm" "$test_case"
    done
}

delete_old_jars() {
    print_step "Deleting JARs downloaded by the tests"
    BASE_PATH="$JAMAL_HOME/.m2/repository/com/javax0/jamal"
    for dir in "$BASE_PATH"/*/*; do
        [[ -d "$dir" && "$(basename "$dir")" != "$VERSION" ]] && rm -rf "$dir"
    done
    find "$BASE_PATH" -type f \( -name "*-javadoc.jar" -o -name "*-sources.jar" \) -exec rm -f {} +
}

calculate_classpath() {
    print_step "Calculating the CLASSPATH"
    CLASSPATH=$(find "$JAMAL_HOME/.m2/repository" -name "*.jar" | tr '\n' ':')
    JAMAL="java -cp \"$CLASSPATH\" javax0.jamal.cmd.JamalMain"
    echo "Jamal command is $JAMAL"
}

main() {
    check_docker_env
    validate_working_directory
    setup_repository
    extract_version
    setup_jamal_config
    test_security_permissions
    delete_old_jars
    calculate_classpath
    print_step "INTEGRATION TEST SUCCESSFUL"
}

main
