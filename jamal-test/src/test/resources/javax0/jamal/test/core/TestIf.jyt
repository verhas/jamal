Empty string is evaluated false:
  Input: '{@if || this is not the output| this is the output}'
  Output: ' this is the output'

Content with spaces only is false:
  Input: '{@if |   | this is not the output| this is the output}'
  Output: ' this is the output'

Content with spaces only is true with options [not empty]:
  Input: '{@if [not empty] |   | this is the output| this is not the output}'
  Output: ' this is the output'

Empty string is evaluated true when negated:
  Input: '{@if [not]|| this is not the output| this is the output}'
  Output: ' this is not the output'

Literal 'false' is evaluated false:
  Input: '{@if |false| this is not the output| this is the output}'
  Output: ' this is the output'

Literal '0' is evaluated false:
  Input: '{@if |0| this is not the output| this is the output}'
  Output: ' this is the output'

Literal 'true' is evaluated true as any non-empty string:
  Input: '{@if |true| this is the output| this is not the output}'
  Output: ' this is the output'

Non empty string is evaluated true:
  Input: '{@if |blabla bla bla| this is the output| this is not the output}'
  Output: ' this is the output'

Literal 'false' is also true when we check with options [not empty]:
  Input: '{@if [not empty] |false| this is the output| this is not the output}'
  Output: ' this is the output'

Literal 'false' is also true when we check with options [not blank]:
  Input: '{@if [not blank] |false| this is the output| this is not the output}'
  Output: ' this is the output'

When condition is false and there is no "else" part then empty string is the result:
  Input: '{@if |0| this is not the output     }'
  Output: ''

Literal '0000' is evaluated false:
  Input: '{@if |0000| this is not the output| this is the output}'
  Output: ' this is the output'

Anything that is not zero length string, not numeric zero is true:
  Input: '{@if|0000.|this is not a number any more}'
  Output : this is not a number any more

You can use regular expression as separator:
  Input: '{#if`///`1///a}'
  Output: a

If cannot live without arguments:
  Input: '{#if}'
  Throws: Macro 'if' needs 1, 2 or 3 arguments

Testing numerical comparing lessThan true:
  Input: '{@if [lessThan=55] /-3/it is less than 55/what?}'
  Output: it is less than 55

Testing numerical comparing lessThan false:
  Input: '{@if [lessThan=55] /55/what?/55 is not less than 55}'
  Output: 55 is not less than 55

Testing numerical comparing greaterThan true:
  Input: '{@if [greaterThan=55] /63/it is greater than 55/what?}'
  Output: it is greater than 55

Testing numerical comparing greaterThan false:
  Input: '{@if [greaterThan=55] /55/what?/55 is not greater than 55}'
  Output: 55 is not greater than 55

Testing numerical comparing greaterThan or equals true:
  Input: '{@if [greaterThan=55 equals=55] /55/55 equals 55/what?/}'
  Output: 55 equals 55

Testing numerical comparing equals with multiple options:
  Input: '{@if [equals=55 equals=56 equals=57] /55/55 equals 55/what?/}'
  Output: 55 equals 55

Testing alpha comparing equals with multiple options:
  Input: '{@if [equals="zz" equals="zk" equals="hk"] /zz/zz equals zz/what?/}'
  Output: zz equals zz


Testing numerical comparing equals with multiple options with 'or':
  Input: '{@if [equals=55 or equals=56 equals=57] /55/55 equals 55/what?/}'
  Output: 55 equals 55

Testing numerical comparing lessThan and greaterThan true:
  Input: '{@if [lessThan=55 and greaterThan=53] /54/54 is between 53 and 55/what?/}'
  Output: 54 is between 53 and 55

Testing numerical comparing lessThan and greaterThan false:
  Input: '{@if [lessThan=55 and greaterThan=53] /56/what?/56 is not between 53 and 55}'
  Output: 56 is not between 53 and 55

Testing numerical comparing all three as and true:
  Input: '{@if [lessThan=55 and greaterThan=53 equals=54] /54/54 is between 53 and 55/what?}'
  Output: 54 is between 53 and 55

Testing numerical comparing 'lessThan and greaterThan and' throwing:
  Input: '{@if [lessThan=55 and greaterThan=53 and] /56/what?/56 is not between 53 and 55}'
  Throws: The key 'and' must not be multi valued in the macro 'if'

Testing 'and' and 'or' together:
  Input: '{@if [lessThan=55wussy and greaterThan=53 or equals=13] /56/what?/56 is not between 53 and 55}'
  Throws: In the macro 'if' only one of 'and', 'or' can be true\.

Testing 'blank' and 'empty':
  Input: '{@if [empty blank] /whatever/what?/56 is not between 53 and 55}'
  Throws: In the macro 'if' only one of 'blank', 'empty' can be true\.

Testing 'blank' and numeric together:
  Input: '{@if [lessThan=55wussy blank] /56/what?/56 is not between 53 and 55}'
  Throws: You cannot have 'empty' or 'blank' options in an 'if' macro with numeric options\.

Testing 'empty' and numeric together:
  Input: '{@if [lessThan=55wussy empty] /56/what?/56 is not between 53 and 55}'
  Throws: You cannot have 'empty' or 'blank' options in an 'if' macro with numeric options\.

Testing 'and' without numeric options:
  Input: '{@if [and] /56}'
  Throws: You cannot have 'and' or 'or' options without multiple numeric options in an 'if' macro\.

Testing 'or' without numeric options:
  Input: '{@if [or] /56}'
  Throws: You cannot have 'and' or 'or' options without multiple numeric options in an 'if' macro\.

Testing 'and' with one numeric options:
  Input: '{@if [and equals=3] /56}'
  Throws: You cannot have 'and' or 'or' options without multiple numeric options in an 'if' macro\.

Testing 'or' with one numeric options:
  Input: '{@if [or equals=3] /56}'
  Throws: You cannot have 'and' or 'or' options without multiple numeric options in an 'if' macro\.

Testing 'or' set to false:
  Input: '{@if [or=false equals=3 equals=4] /4/or set to false is no way/what?}'
  Output: or set to false is no way

Testing isDefined:
  Input: '{@define a=13}{@if [isDefined] /a/yes/no} {@if [isDefined] /b/yes/no}'
  Output: 'yes no'

Testing isLocal:
  Input: '{@define a=13}{#ident {@if [isLocal] /a/yes/no} {@if [isLocal] /b/yes/no}} {@if [isLocal] /a/yes/no} {@if [isLocal] /b/yes/no}'
  Output: 'no no yes no'

Testing isGlobal:
  Input: '{@define a=13}{#ident {@if [isGlobal] /a/yes/no} {@if [isGlobal] /:a/yes/no} {@if [isGlobal] /b/yes/no} {@define b=wuff}{@if [isGlobal] /b/yes/no}} {@if [isGlobal] /a/yes/no} {@if [isGlobal] /b/yes/no}'
  Output: 'yes yes no no yes no'