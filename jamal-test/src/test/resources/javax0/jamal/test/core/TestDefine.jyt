# When the user-defined macro name itself is defined as the result of a macro evaluation, it is forbidden to get the
# separator character as the result of the evaluation. In this case `z` is evaluated to `a|` and that would make
# `|` to the separator character for the arguments (we have here only one).

The default macro can have extra parameters when no arg is needed, this is a special case:
  Input: "{@define default(...)=[undef]}{argless}{oneArg ignored}{twoArgs/1/2}{threeArgs/1/2/3}"
  Output: "[undef][undef][undef][undef]"

The default macro can have extra parameters when no arg is needed:
  Input: "{@define default(...$_)=[$_]}{argless}"
  Output: "[argless]"

The default macro can have extra parameters when no arg is needed, but only one extra:
  Input: "{@define default(...$_)=[$_]}{oneArg ignored}"
  Throws: "Macro 'default' needs \\(0 ... 1\\) arguments and got 2.*"

The default macro can have extra parameters when no arg is needed but you need a dummy argument :
  Input: "{@define default($_...)=[$_]}"
  Throws: "One parameter macro cannot have 'xxx...' argument."

The default macro can have extra parameters:
  Input: "{@define default(...$_,b...)=[$_]}{argless}{oneArg ignored}{twoArgs/1/2}{threeArgs/1/2/3}"
  Output: "[argless][oneArg][twoArgs][threeArgs]"

Macro can ignore all parameters:
  Input: "{@define w(...)=[undef]}{w}{w ignored}{w/1/2}{w/1/2/3}"
  Output: "[undef][undef][undef][undef]"

The macro can have extra parameters:
  Input: "{@define a(a,b...)=[a,b]}{a/1/2}{a/1/2/3}"
  Output: "[1,2][1,2]"

Some macro parameters may be optional:
  Input: "{@define a(a, ... b)=[a,b]}{a/1/2}{a/1}"
  Output: "[1,2][1,]"

Some macro parameters may be optional without space after the ellipsis:
  Input: "{@define a(a, ...b)=[a,b]}{a/1/2}{a/1}"
  Output: "[1,2][1,]"

Some macro parameters may be optional but throws for extra parameters:
  Input: "{@define a(a, ...b)=[a,b]}{a/1/2/3/4/5}"
  Throws: "Macro 'a' needs \\(1 ... 2\\) arguments and got 5.*"

Some macro parameters may be optional but throws for too few parameters:
  Input: "{@define a(a, ...b)=[a,b]}{a}"
  Throws: "Macro 'a' needs \\(1 ... 2\\) arguments and got 0.*"

A macro can have all parameters optional:
  Input: "{@define a(...a,b)=[a,b]}{a}{a/1}{a/1/2}"
  Output: "[,][1,][1,2]"

A macro can have all parameters optional throws for extra parameters:
  Input: "{@define a(...a,b)=[a,b]}{a/1/2/3}"
  Throws: "Macro 'a' needs \\(0 ... 2\\) arguments and got 3.*"

A macro can be total lenient:
  Input: "{@define a(...a,b...)=[a,b]}{a}{a/1}{a/1/2}{a/1/2/3}"
  Output: "[,][1,][1,2][1,2]"

A macro can have one optional parameter:
  Input: "{@define a(...a)=[a,b]}{a}{a/1}"
  Output: "[,b][1,b]"

A macro can have one optional parameter and it handles one argument specially:
  Input: "{@define a(...a)=[a,b]}{a}{a/1}{a/1/2}"
  Output: "[,b][1,b][1/2,b]"

One parameter macro cannot say it may have extra parameters because one parameter macros are handles specially:
  Input: "{@define a(a...)=[a,b]}"
  Throws: "One parameter macro cannot have 'xxx...' argument."

The last parameter may be optional and the same time we can allow extra parameters:
  Input: "{@define a(a,...b...)=[a,b]}{a /1}{a/1/2}{a/1/2/3}"
  Output: "[1,][1,2][1,2]"

The last parameter may be optional and the same time we can allow extra parameters but it throws if mandatory parameters are not there:
  Input: "{@define a(a,...b...)=[a,b]}{a }"
  Throws: "Macro 'a' needs \\(1 ... inf\\) arguments and got 0"

The macro can also be non lenient:
  Input: "{@define a(a,b)=[a,b]}{a}{a/1/2}{a/1/2/3}"
  Throws: Macro 'a' needs 2 arguments and got 0

A macro name can be defined as the result of a macro:
  Input: |
    {@define z=a|}\       {%@comment when this is used as macro it will be invalid%}
    {@define a(k)=hkh}\
    {@try! {{z}K}}{%@comment {z}K will become a|K, which would be ok, but the | comes from the macro%}
    {@define z=a}\
    {{z}|K}{%@comment {z}|K will become a|K, which is be ok, the | comes from the use and not the macro hidden%}
    this would be correct

  Output: |
    Macro evaluated result user defined macro name contains the separator. Must not.
    hKh
    this would be correct

First character is used as spearator, it cannot be an alpha character:
  Input: "{@try! {@define a(b,c)=bika cica}{a HkukkHmukk}}"
  Output: "Invalid separator character 'H' "

macro can be defined when another macro is evaluating:
  Input: |
    {@define firstName=Julia}{@define k(h)=h, {firstName} h{@define son=Junior h}}\
    {k /Bond{@define firstName=James}}
    {son}
    {k /Band}
    {son}
  Output: |
    Bond, James Bond{%@comment this the local value of the macro `firstName`%}
    Junior Bond
    Band, Julia Band{%@comment this the global value of the macro `firstName`%}
    Junior Band

Verbatim use of a user defined macro also closes the scope:
  Input: "{@define a=this is it}{@define b={a}}{#define c={@verbatim b}}{c} {@verbatim c}"
  Output: "this is it {a}"

Lenient allows more argument than needed:
  Input: "{@options lenient}{@define z()=zzz}{z aaa}"
  Output: "zzz"

Lenient allows less argument than needed:
  Input: "{@options lenient}{@define z(k,h)=kzzzh}{z :aaa}"
  Output: "aaazzz"

Documentation fish test:
  Input: |-
    {@define z(*a,*b,*c,*d)=When a *a can *b then *c can *d}
    {z /leopard and a *c/run/fish/fly}
  Output: "\nWhen a leopard and a *c can run then fish can fly"

With the 'define !' you cannot redefine a macro, throws exception:
  Input: "{@define a=1}{@define ! a=2}"
  Throws: "The macro 'a' was already defined."

With the 'define !' you cannot redefine a macro even in inner scope, throws exception:
  Input: "{@define a=1}{#block {@define ! a=2}}"
  Throws: "The macro 'a' was already defined."

Invalid macro evaluation:
  Input: |-
    {@try! {@define z=a}{@define su=/}
    {@define a(k)=hkh}
    {{z}{su}K}}
  Output: "Macro evaluated result user defined macro name contains the separator. Must not."

Recursive definitions work:
  Input: |-
    {@define wilfred=define}{#{wilfred} alfred=wilfred}{alfred}
    {@define black=white}{@define white=black}{{black}} {{{black}}}
    {@define bla=whi}{@define ck=te}{{bla}\
    {ck}} {{{bla}{ck}}}
  Output: "wilfred\nblack white\nblack white"

{%@define OneArg($X)=One argument macro can use $X as a separator%}
{%OneArg space%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose this text}
  Output: |-
    <||this text||>

{%OneArg non-alpha character%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose|this text}
  Output: |-
    <||this text||>

{%OneArg non-alpha character after space%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose |this text}
  Output: |-
    <||this text||>

{%OneArg non-alpha character after space followed by other non-alpha%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose |+this text}
  Output: |-
    <||+this text||>

{%OneArg non-alpha character after space followed by same non-alpha%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose ||this text}
  Output: |-
    <|||this text||>

{%OneArg non-alpha character after space followed by space%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose | this text}
  Output: |-
    <|| this text||>

{%OneArg non-alpha character after space, argument containing the separator%}:
  Input: |-
    {@define enclose(a)=<||a||>}\
    {enclose | this||text}
  Output: |-
    <|| this||text||>

One argument macro can get the argument from the evaluation of another macro:
  Input: "{@define a(x)=<<|x|>>}{@define b=55}{a {b}}"
  Output: "<<|55|>>"

Test globally defined macro optional redefinition using local name:
   Input: "{@define :a=1}{#ident {@define ?a=2}{a}}"
   Output: "1"

Test globally defined macro optional redefinition using global name:
   Input: "{@define :a=1}{#ident {@define ?:a=2}{a}}"
   Output: "1"

Test globally defined macro optional redefinition in local scope:
   Input: "{@define :a=1}{#ident {@define ?:a=2}{:a}}"
   Output: "1"

Test globally defined macro optional redefinition using local name using option 'optional':
   Input: "{@define :a=1}{#ident {@define [optional]a=2}{a}}"
   Output: "1"

Test globally defined macro optional redefinition using global name using option 'optional':
   Input: "{@define :a=1}{#ident {@define [optional]:a=2}{a}}"
   Output: "1"

Test globally defined macro optional redefinition in local scope using option 'optional':
   Input: "{@define :a=1}{#ident {@define [optional]:a=2}{:a}}"
   Output: "1"

Using option 'optional' together with '?' is error:
   Input: "{@define :a=1}{#ident {@define [optional] ?:a=2}{:a}}"
   Throws: "You cannot use optional and '\\?' in the define.*"

You cannot use [optional failIfRedefined]:
  Input: "{@define [ifNotDefined failIfDefined] a=13}"
  Throws: "In the macro 'define' only one of 'failIfDefined', 'ifNotDefined' can be true\\."

Double verbatim character in define is an error:
  Input: "{@define ~?~ a={@code}}{a}"
  Throws: "define.*has no.*"

Macro defined to be verbatim:
  Input: "{@define~ a={@code}}{a}"
  Output: "{@code}"

Macro defined to be verbatim using option:
  Input: "{@define [verbatim] a={@code}}{a}"
  Output: "{@code}"

Macro defined verbatim using the ~ sign after a space:
  Input: "{@define ~ a={@code}}{a}"
  Output: "{@code}"

Optional redefine to be verbatim:
  Input: "{@define ?~ a={@code}}{a}"
  Output: "{@code}"

Error redefine to be verbatim:
  Input: "{@define !~ a={@code}}{a}"
  Output: "{@code}"

Verbatim error redefine to be verbatim:
  Input: "{@define ~! a={@code}}{a}"
  Output: "{@code}"

Verbatim optional redefine to be verbatim:
  Input: "{@define ~? a={@code}}{a}"
  Output: "{@code}"

Verbatim macro post evaluated is the same as non-verbatim macro:
  Input: "{@define b=2}{@define ~ a={b}}{!a}"
  Output: "2"

macro named 'default' is invoked when defined instead of undefined error:
  Input: "{@define default=wupppps...}{something}"
  Output: "wupppps..."

Incomplete user defined macro definition throws exception:
  Input: "{@define z wupppps...}"
  Throws: "define 'z' has no '=' to body"

macro named 'default' is invoked when defined instead of zero string when macro used optionally:
  Input: "{@define default=wupppps...}{?something}"
  Output: "wupppps..."

simplest ever define and use user-defined macro:
  Input: "{@define a=wupppps...}{a}"
  Output: "wupppps..."

macros can be redefined:
  Input: "{@define a=y}{@define a=x}{a}"
  Output: "x"

macros can be redefined conditionally, and are not redefined if already defined:
  Input: "{@define a=y}{@define ? a=x}{a}"
  Output: "y"

macro redefinition can result error in case we use !:
  Input: "{@define a=y}{@define ! a=x}{a}"
  Throws: "The macro 'a' was already defined."

"macro redefinition can result error in case we use option 'failIfDefined'":
  Input: "{@define a=y}{@define [failIfDefined] a=x}{a}"
  Throws: "The macro 'a' was already defined."

"You cannot use option 'failIfDefined' and '!' together":
  Input: "{@define a=y}{@define [failIfDefined] ! a=x}{a}"
  Throws: "You cannot use failIfDefined and '!' in the define.*"

conditional redefinition does not redefine any higher scope already defined macro:
  Input: "{#ident {@define :a=y}}{@define ? a=x}{a}"
  Output: "y"

"last character of a macro can be ':' colon":
  Input: "{#ident {@define a:()=y}}{a:}"
  Output: "y"

"when {@define a():=y} defines a and must have ()":
  Input: "{@define a():=y}{a}"
  Output: "y"

"{@define a:=y} is ambigous and therefore forbidden":
  Input: "{@define a:=y}{a}"
  Throws: "The \\(\\) in define is not optional when the macro name ends with ':'\\."

"you can define a macro with := when it has parameters":
  Input: "{@define a(z):=yz}{a Z}"
  Output: "yZ"

"Using := to define a pure macro will freeze the opening and closing strings in the macro when used":
  Input: "{@define a(z):={yz}}{@define yZ=k}{@sep [ ]}[a Z]"
  Output: "{yZ}"

"Using [pure] to define a pure macro will freeze the opening and closing strings in the macro when used":
  Input: "{@define [pure] a(z)={yz}}{@define yZ=k}{@sep [ ]}[a Z]"
  Output: "{yZ}"

"Using = to define a macro will replace the macros in the macro even if the opening/closing string is already different":
  Input: "{@define a(z)={yz}}{@define yZ=k}{@sep [ ]}[a Z]"
  Output: "k"

"throws exception when an argument appears more than once":
  Input: "{@define a(xx,a,b,a,d)=}"
  Throws: "User defined macro parameter name should not be a substring of another parameter.*"

"throws exception when an argument is prefix of a later argument":
  Input: "{@define a(xx,a,b,alma,d)=1}"
  Throws: "User defined macro parameter name should not be a substring of another parameter.*"

"throws exception when an argument is prefix of an earlier argument":
  Input: "{@define xx(alma,b,a,d)=}"
  Throws: "User defined macro parameter name should not be a substring of another parameter.*"


"creates the macro object when there are no arguments":
  Input: "{@define xx=}"
  Output: ""

"replaces arguments with actual values":
  Input: "{@define ~ xx(a,b,c,d)=a{b}c{d}}{xx/bbb/ccc/ddd/aaa}"
  Output: "bbb{ccc}ddd{aaa}"

"a define is defined inside define":
  Input: |-
    {@define tag(x)={@define x(y)=<x>y</x>}}
    {tag/name}
    {name/Peter}
  Output: "\n\n<name>Peter</name>"

"ident protects argument from post evaluation":
  Input: |-
    {#define a=13}
    {@define b={a}}
    {#define c={a}}
    {#define d={@ident {a}}}
    {@verbatim b}
    {@verbatim c}
    {@verbatim d}
  Output: "\n\n\n\n{a}\n13\n{a}"

"test that the splitting works even with empty elements":
  Input: |-
    {@define tag(_x)={@define _x(_y)=<_x>_y</_x>}}
    {!@for _tag in (groupId,artifactId,version)=
    {tag/_tag}}
    {@define GAV(_groupId,_artifactId,_version)=
        {#if|_groupId|{groupId :_groupId}}{#if|_artifactId|{artifactId :_artifactId}}{#if|_version|{version :_version}}
        {#define GROUPID=_groupId}{#define VERSION=_version}}
    {GAV :org.apache.maven.plugins:maven-surefire-plugin:}
  Output: "\n\n\n\n\n\n\n    <groupId>org.apache.maven.plugins</groupId><artifactId>maven-surefire-plugin</artifactId>\n    "

"begin and end works properly":
  Input: "{@define Z=1}{@begin alma}{@define Z=2}{Z}{@define S=2}{@export S}{@end  alma }{Z}{S}"
  Output: "212"

"test definition evaluation order":
  Input: |-
    {@define firstName=Julia}{@define k(h)=h, {firstName} h{@define son=Junior Bond}}\
    {k /Bond{@define firstName=James}}
    {k /Bond}
    {son}
  Output: |-
    Bond, James Bond
    Bond, Julia Bond
    Junior Bond

"verbatim also closes the scope":
  Input: "{@define a=this is it}{@define b={a}}{#define c={@verbatim b}}{c} {@verbatim c}"
  Output: "this is it {a}"

"user defined macro post evaluation":
  Input: |-
    {@define a=this is it}\
    {@define b={`a}}\
    {@define c={`b}}\
    {@define userDefined={`c}}\
    {userDefined}
    {!userDefined}
    {!!userDefined}
    {!!!userDefined}
  Output: |-
    {c}
    {b}
    {a}
    this is it

"undefined macro with ? mark results empty string":
  Input: "{?a}"
  Output: ""

"undefined macro without ? mark results empty string when option emptyUndef":
  Input: "{@options emptyUndef}{a}"
  Output: ""

"When there is an undefined macro during the evaluation of a macro the mark stack is not messed up 1":
  Input: "{@try! {@define a={@undefined}}{a}}"
  Output: "There is no built-in macro with the id 'undefined'; did you mean '@undefine'?"

"When there is an undefined macro during the evaluation of a macro the mark stack is not messed up 2":
  Input: "{@try! {@define a={undefined}}{a}}"
  Output: "User macro '{undefined ...' is not defined. Did you mean '@undefine'?"

"A defined and then undefined macro can be redefined even with ! in the define.":
  Input: "{@define a=1}{@undefine a}{@define ! a=2}"
  # no output, just that it does not throw exception
  Output: ""

"define with option 'RestrictedDefineParameters' does not accept non identifier as argument":
  Input: |-
    {@options RestrictedDefineParameters}
    {@define z(=6,]k)=wop=6}
  Throws: "The parameters of the define must be identifiers.*"

"define with option 'RestrictedDefineParameters' works with identifiers as arguments":
  Input: |-
    {@options RestrictedDefineParameters}\
    {@define z($A,_B)=wop$A}\
    {z/a/b}
  Output: "wopa"

"define without option 'RestrictedDefineParameters' does not accept non identifier as argument":
  Input: "{@define z(=6,]k)=wop=6}{z/a/b}"
  Output: "wopa"

"define and export the macro using an option":
  Input: "{#block {@define [export] a=1}}{a}"
  Output: "1"

"Define with tail argument":
  Input: "{@define [tail] x(a,b,c)=a b c}{x/1/2/3/4/5}"
  Output: "1 2 3/4/5"
