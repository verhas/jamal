{%@yaml:string output=
a is either a, b, c or d
b is either a, b, c or d
c is either a, b, c or d
d is either a, b, c or d
%}

{%#yaml:define testFor=
Test evaluating lenient:
  Test that works:
    Input: |-
      {#for (k,z) in ()=wukz{@options :lenient}}
    Output: |-
      wu
  Test that does not work, though it should:
    Input: |-
      {#for (k,z) in ()=wukz{@options :lenient}}
    Output: |-
      wu



iterating through an array:
    Input: |-
      {@use javax0.jamal.test.core.ObjectMacro as macroArray}\
      {@macroArray (type=Array) array}\
      {@for $x from array=$x}
      {@macroArray (type=Set) set}\
      {@for $x from set=$x}
      {@macroArray (type=Stream) stream}\
      {@for $x from stream=$x}
    Output: |-
      abc
      abc
      abc

Test a simple for loop:
  Input: "{@for x in (a,b,c,d)=x is either a, b, c or d\n}"
  Output: {%@yaml:ref output%}

multi-variable loop:
  Input: "{@for (x,y) in (a|1,b|2,c|3,d|4)=x is y\n}"
  Output: |
    a is 1
    b is 2
    c is 3
    d is 4

Test a simple for loop with separator redefinition:
  Input: "{@define $forsep=;}{@for x in (a;b;c;d)=x is either a, b, c or d\n}"
  Output: {%@yaml:ref output%}

Test a simple for loop with separator redefinition and trimmed:
  Input: "{@for [separator=; trim] x in (a; b; c; d)=x is either a, b, c or d\n}"
  Output: {%@yaml:ref output%}

Test a simple for loop with sep redefinition and trimmed:
  Input: "{@for [sep=; trim] x in (a; b; c; d)=x is either a, b, c or d\n}"
  Output: {%@yaml:ref output%}

Test a simple for loop with back-ticked separator:
  Input: "{@define $forsep=;}{@for x in `)))`a);b);c);d)`)))`=x is either a, b, c or d\n}"
  Output: |
    a) is either a, b, c or d
    b) is either a, b, c or d
    c) is either a, b, c or d
    d) is either a, b, c or d

test iterating through a Map:
  Input: |-
    {@yaml:define zzz=
    "abra": null
    "kadab": null
    "ra": null
    }{@for $x from zzz=the key is $x
    }
  Output: |
    the key is abra
    the key is kadab
    the key is ra

test iterating through a Map with multiple variables:
  Input: |-
    {@yaml:define zzz=
    "abra": "rubra"
    "kadab": null
    "ra": null
    }{@for ($x,$y) from zzz=the key is $x $y
    }
  Output: |
    the key is abra rubra
    the key is kadab {%@comment this comment saves the trailing space%}
    the key is ra {%@comment this comment saves the trailing space%}

test iterating through a list:
  Input: |-
    {@use yaml:set as pojo:set}{@yaml:define zzz=
    "abra": [1,2,3,4]
    }{@pojo:set zizi=/zzz.abra}{@for $x from zizi=the count $x
    }
  Output: |
    the count 1
    the count 2
    the count 3
    the count 4

test iterating through a set:
  Input: |-
    {@use yaml:set as pojo:set}{@yaml:define zzz=
    "abra":
      ? 1
      ? 2
      ? 3
      ? 4
    }{@pojo:set zizi=/zzz.abra}{@for $x from zizi=the count $x
    }
  Output: |
    the count 1
    the count 2
    the count 3
    the count 4


test iterating through a list with added empty strings:
  Input: |-
    {@use yaml:set as pojo:set}{@yaml:define zzz=
    "abra": [1,2,3,4]
    }{@pojo:set zizi=/zzz.abra}{@for ($x, $y) from zizi=the count $x >>$y<<
    }
  Output: |
    the count 1 >><<
    the count 2 >><<
    the count 3 >><<
    the count 4 >><<

test evaluating the list:
    Input: |-
      {@define x=a,b,c}{@for [evalist] z in ({x})=z z z}
    Output: |-
      a a ab b bc c c

test evaluating the list with the macro name:
  Input: |-
    {@define x=a,b,c}{@for [evalist] z in (x)=z z z}
  Output: |-
    a a ab b bc c c

test evaluating a list with joiner:
  Input: |-
    {@for [join=|]z in (a,b,c)=z}
  Output: |-
    a|b|c

Syntax error:
  Invalid keyword after the variables:
    Input: "{@for a iiiin (1,2,3)=$a, init}"
    Throws: "The keyword 'in/from' is missing in the 'for' macro '\\(1,2,3\\)=\\$a, init'"

  Non-lenient, different number of arguments:
    Input: "{@for ($a,$b) in (a|a,b|a,c,12|3|3)=}"
    Throws: "number of the values does not match the number of the parameters.*"

  Simple syntax error 1:
    Input: "{@for ($a,$b) in a|a,b|a,c,12|3|3)=}"
    Throws: "for macro has bad syntax '.*"

  Simple syntax error 2:
    Input: "{@for ($a,$b) im (a|a,b|a,c,12|3|3)=}"
    Throws: "The keyword 'in/from' is missing in the 'for'.*"
  Simple syntax error 3:
    Input: "{@for ($a) in (a,b,c)}"
    Throws: "for macro has bad syntax, missing '='.*"
  Simple syntax error 4:
    Input: "{@for ($a) in `a,b,c}"
    Throws: "There is no closing '`' before the values in the for macro."
  Simple syntax error 5:
    Input: "{@for ($a) in `|`a,b,c}"
    Throws: "There is no closing `\\|` for the values in the for macro."
  Simple syntax error 6:
    Input: "{@for ($a,$b) in (a|a,b|a,c,12|3|3=}"
    Throws: "There is no closing '\\)' for the values in the for macro."

%}
{%@yaml:output testFor%}