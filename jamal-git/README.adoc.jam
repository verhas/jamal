= Jamal Git Macros
{%@import res:jamal.jim%}
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

This macro package can fetch information from a local git repository.
The package does not support modification of the repository, only reading information from it.
The package does not support remote repositories, only local ones.

This macro package is included in the prepackaged versions of Jamal.

When using this module from Java code, you have to add the dependency to your Maven project, as:

[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>{%pom /project/artifactId/text()%}</artifactId>
    <version>{%VERSION%}</version>
</dependency>
----


== Macros Implemented
{%@snip:collect from=src/main/%}

=== `git`

This macro should be used to specify the directory of the git repository.
For example

{%sample/{@git location=../.git}%}

will locate the repository and then subsequent macros can fetch information from the repository.
The parameter option (parop) `location` is mandatory and it should point to the `.git` directory of the repository.

The parameters of the opened repository are stored in the user defined macro `$git`.
You can reference this macro directly as `{$git}` and the value will always be an empty string.

If you want to handle multiple git repositories, you can use the parop `id` to give an identifier to the repository.
If used, the name specified will be used as a user-defined macro name to store the preference to the git repository.
In this case the parop `id` should be used in all later calls to the git macros using the specific git repository.

=== `git:tag(s)`, `got:branch(es)`

This macro can be called as

* `git:tag`,
* `git:tags`,
* `git:branch`, or
* `git:branches`

The macro can collect tags or branches from the local git repository.
The singular and plural forms behave the same, and they exist to help the readability.
The macro names containing `tag` return a tag  or tags, and the ones containing `branch` return a branch or branches.

The behavior of the macro can be controlled using parops.
These are the following:

{%!#replaceLines replace="/^.*?\"(.*?)\".*/* `$1`/" replace=~^\s*//\s*~~ replace="/.*enumeration.*/"
{%@snip tag_parameters%}%}

Examples:

{%sample/{@git location=../.git}
The latest release of Jamal is {#string:substring (begin=1) {@git:tag last orderByName match=v.*}}.
%}

result in:

{%output%}

=== `git:commit(s)`

This macro will return one or more commits from the git repository.


{%!#replaceLines replace="/^.*?\"(.*?)\".*/* `$1`/" replace=~^\s*//\s*~~ replace="/.*enumeration.*/"
{%@snip commit_parameters%}%}

NOTE: There is a separate section detailing how to use the parop `footnote`.
See below!

There are certain restrictions on the commit parameters.
You can use some parameters together, while some others are exclusive:

{%!#replaceLines replace="/^\\s*BadSyntax.*?\"(.*?)\".*/* $1/" replace=~'~`~
{%@snip commit_restrictions%}%}

Examples:

{%sample/{@git location=../.git}
The latest commit to Jamal is: "{@git:commit branch=master last shortMessage}"
%}

result in:

{%output%}


{%sample/
{@counter:define id=$counter format=%2d start=1 step=1 }
{#range lines=1..11
  {!@for [evalist] $C in ({@git:commit from=1.0.2 to=1.1.0 branch=master hash})=
{$counter}. {@git:commit ref=$C abbreviated}
    {@git:commit ref=$C shortMessage}}}
%}


result in:

{%output%}

== `git:commit footnote`

The command `git:commit` can be used to collect the commit message footnotes.
The command has to be called with the `footnote` parop specifying the name of the footnote.
Using this command, you can create a list of changes between two releases.

You can add lines to the commit messages starting with a key, like `Change-Note`.
When you use the parop `footnote=change-note` specifying the name of the key the value will be the text following the key in the commit message.

In the following example we print the footnote `my-special` and also the full commit message for a specific commit of the Jamal git repository:

{%sample/
message: {@git:commit ref=178bb91 message}
footnote: {@git:commit ref=178bb91 footnote=my-special}
%}

will result in:

{%output%}

You can add multiline footnotes to the commit messages.
When the first line or any continuation line ends with an underscore (`_`) character the next line will be appended to the footnote.
The underscore character and any spaces before are removed from the output.
Footnote lines always end with a new line character, even if the commit message is not terminated with one.

=== `git:format`

Format a time stamp from the git repository.
When some commands like `git:commit` return a time stamp, you can format it using this macro.
The format is the same as the Java `SimpleDateFormat` format and it has to be specified in the input of the macro.
The time stamp is specified in the parop `time`.

{%!#replaceLines replace="/^.*?\"(.*?)\".*/* `$1`/" replace=~^\s*//\s*~~ replace="/.*enumeration.*/"
{%@snip format_parameters%}%}

Examples:

{%sample/
{@git:commit ref=178bb91 date}
{#git:format (time={@git:commit ref=178bb91 date}) yyyy-MM-dd HH:mm:ss Z}
%}

will result in:

{%output%}