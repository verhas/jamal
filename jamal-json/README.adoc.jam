= Jamal Json integration module
{%@options failfast%}


{%@import res:jamal.jim%}
{%#counter:define id=macroChapter {%@define format=$roman. %}%}
{%@snip:collect from=src/main/java%}
Using this integration module, you can mix Jamal macro text with JSON data.

The module is included in the standard versions of Jamal, so you can use it right out of the box.

If you create your own Jamal Java integration, you have to add the dependency to your Maven project, as:
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\
{%#define ARTIFACT_ID={%pom /project/artifactId/text()%}%}\
[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>{%ARTIFACT_ID%}</artifactId>
    <version>{%VERSION%}</version>
</dependency>
----

Following that, you can use the
{%@define ref($x)=<<$x,`json:$x`>>%}

. {%ref define%}
. {%ref get%}
. {%ref set%}
. {%ref length%}
. {%ref keys%}

{%@define link($x)=<<$x,`json:$x`>>%}
macros.
This macro package was created refactoring the original `jamal-yaml` macro library.
During the development, we created the macros so that they can be used in a similar manner to Yaml macros.
Although we tried to be as close to the structure of the Yaml macros, there are differences.
These differences come from the different nature of Json and Yaml.

== Macros implemented in the package

{%@define chapter($x)=
[[$x]]
=== {%macroChapter%}`json:$x`
{%!#snip {%@case:cap $x%}_macro_documentation%}%}

{%chapter define%}
{%chapter get%}
{%chapter set%}
{%chapter length%}
{%chapter keys%}