{%@import res:jamal.jim%}
{%@import ../../RELEASES.jim%}

{%@define forMoreAboutEvaluationOrder=
For more about definition scopes and exporting, read the section about <<export,`export`>>.
In that section we discuss the evaluation order of the macros in great detail.
%}

{%@define [named] MACRO(name="NAME OF THE MACRO",since="VERSION SINCE WHICH THE MACRO IS AVAILABLE")== `name`

sinc{%@comment%}e version `since`
%}


this macro is to be used to reference other macros inside the documentation of the package
{%@define $($name)=link:{%#file (format=$name){%#case:lower {%@replace (detectNoChange=false) /$name/:/_%}%}.adoc%}[`$name`]%}



{%#define MacroEvaluationOrder=For more information about about the macro evaluation order, please consult the {%$ evaluation_order%} documentation page.%}

{%@define fileNameExplanationFor($action$)=
The name of the file can be absolute, or it can be relative to the file that $action$s the other file.
Any file name starting with the letters `res:` are considered to be resource files in Java.
This makes it possible to load macros that are provided with JAR libraries on the classpath.
Any file name starting with the letters `https:` are downloaded from the net.
In addition to these Jamal comes with a JAR and a Maven reader that can read files from JAR files and from Maven repositories.
In these cases the file name starts with `jar:file:` or `maven:`.
%}
{%@define TEXT:RANGE=The individual ranges can be separated by `,` or `;`.
The ranges are specified as a range of numbers separated by `..` (two dots).
A one line range can be specified by a single number.
The range start line number can be larger than the end line number.
In that case that lines appear in reversed order from the start to the end.
The lines are included in the order as the ranges specify.
Using this option you can rearrange the order of the lines.
When you want to specify a range lasting to the end of the lines you can write `13..inf` or `5..infinity`.
Range numbering starts with 1.
+
This option cannot be defined as macro.%}
{%@define noCacheExplanation=
* `noCache` will ignore the cache when downloading resources using `https:` protocol.
More precisely, it will download the resource from the network and update the cache file with the new content every time.%}

{%@define DEFAULTOPEN($VERSION,$MACRO)=
Starting with version $VERSION the $MACRO macro looks into the file before evaluating it.
If the very first two characters in the file are `{@`, then it evaluates the content using `{` as macro opening string and `}` as macro closing string.
This way you can freely $MACRO resource files provided in JAR file or through the net even if you use different macro opening and closing strings.%}

{%@define MACROSRC=../../jamal-core/src/main/java/javax0/jamal/builtins%}
{%@define ENGINESRC=../../jamal-engine/src/main/java/javax0/jamal/engine%}
{%@define PAROPS=link:../PAROPS.adoc[Parameter Options]%}

{%@define sample(code)={%#define :lastCode=code%}.Jamal source
[source]
----
{%#trimLines
code%}
----%}

{%@define output=.output
[source]
----
{%#trimLines trimVertical
{%!#output {%lastCode%}%}%}
----
%}

{%@comment safeoutput is used to execute JShell because JShell may not be available in IntelliJ%}
{%@define safeoutput=.output
[source]
----
{%#trimLines trimVertical
{%@try!
{%!#output {%lastCode%}%}%}%}
----
%}

{%@define PAROP_IN($x)={%#define $xed={%#if /{%@string:equals /$x/import%}/imported/included%}%}
The option can define multiple prefixes for the file name to be {%$xed%}.
These prefixes are separated by the `|` character.
When performing the $x operation, the first prefix that matches the file name is used.

For example `{@$x (in="a/|b/|c") bumm.txt}` will try to $x `a/bumm.txt`, `b/bumm.txt`, and lastly `cbumm.txt` whichever succeeds first.

The prefix is used at the start of the file name without any extra separator.

This option can be used for relative file names, where the location of the file may be different depending on the context.

The release {%RELEASE:ROGACHEVO%} introduced the option `in`.
%}
