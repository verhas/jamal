{%@import macrodoc.jim%}
{%MACRO name="include" since={%RELEASE:ZURICH%}%}
{%@snip:check file=../../jamal-core/src/main/java/javax0/jamal/builtins/Include.java hash=19297e65%}
{%@import ../../environmentvariables.jim%}
== Syntax

  {@include [top noCache verbatim optional in="" lines=m..n] included_file.jam}

== History
* since {%RELEASE:OULU%} include can be optional to ignore missing files
* since 1.7.3 verbatim include
* since 1.11.0 lines
* since 1.11.0 noCache

== Description

`include` reads a file similarly to `import`, but

* it starts a new scope for the processing of the included file, and
* it also results the content of the file included.

Use `include` to get the content of a file into the main output.

The file included can define user-defined macros.
These macros are available only inside the included file unless they are exported.
The included file may redefine the macro opening and closing string, but this works only in the included file only.
The file that includes the other file is not affected by the redefinition of the macro opening and closing string.

The macro itself is replaced by the output generated by the processing of the included file.

The syntax of the command is

`{@include [options] file_name}`

The options are between the `[` and `]` brackets.
They are:

* `includeVerbatim` (alias `verbatim`)  - the file is inserted into the output as it is without processing.

* `top` - the file is included relative to the top level file. This option cannot be defined as macro.

* `lines` - the option can list ranges of lines to include.
{%TEXT:RANGE%}

* `optional` or `ifExists` will return an empty string if the file does not exist.
The normal operation is to result a BadSyntax exception if the file does not exist.

{%noCacheExplanation%}

[NOTE]
====
Note that the macro `include` is NOT inner scope dependent.
It means that `{#include {@options includeVerbatim} ...}` will not work.
The options set inside the `include` macro have no effect when the `include` macro is executed.

The option set outside, like `{@options includeVerbatim}{#include ...}` will work.
However, it will change the behaviour of all `include` macros executing later, while the option is in effect.

This type of use is not recommended and is included only for backward compatibility and may later be removed.
====

{%fileNameExplanationFor/include%}

The number of includes is limited to 100 in depth.
A file can include another, which can again include another and so on, but only to the maximum depth of 100.
This depth limit is set because an included file can be included many times.
It is possible to implement recursion.
This possibility does not mean that it is clever to do it.
If the recursion does not end, the include macros would drive the macro resolution into an infinite loop.
This limit prevents this to happen.

The limit can be modified setting the environment variable {%JAMAL_INCLUDE_DEPTH_ENV%}.

{%DEFAULTOPEN/{%RELEASE:BUDAPEST%}/include%}

== `in`

{%PAROP_IN/include%}
