{%@import macrodoc.jim%}
{%#snip:check file={%JAVA_DIR%}Variation.java hash=be196264%}
This macro helps not keep variations of repeated texts in the document consistent.

Repeated texts are text fragments that appear in the document at multiple places repeated exactly as they are or with minimal variations.
The macro helps you to create these texts separating the variable part from the constant part.
If there is any discrepancy between the constant part of the text fragments, the macro will report an error.

The macro is used in the following way (example):

{%sample/
{@variation text that happens <<many>> times in the document}
...
{@variation text that happens <<multiple>> times in the document}
%}

and it will result in the following text:

{%output%}

In this case the variable parts are enclosed between `<<` and `>>` strings.
These are the parts that may change.
When the macro is used the second and further subsequent times, these parts are ignored during the comparison.
If the constant parts, which are outside of these special parentheses, differ, the macro will report an error.

__When you fix a typo or change in any way the constant part of the text, you will not forget to update the other occurrences.__

The functionality of the macro is configurable and flexible.
The opening and closing strings are `<<` and ``>>`` by default, but you can change them.
You can also change the way the macro compares the constant parts.
It can ignore the letter casing and also treat different multiple spaces as one.

The parops the macro accepts between `(` and `)` characters are the following:

{%#replaceLines replace="~^.*?\"(.+?)\"\\s*,\\s*\"(.+?)\".*$~* `$1` (alias `$2`)" \
                replace="~^.*?\"(\\w+)\".*$~* `$1`" \
                replace="~//"
{%@snip pasted_params%}
%}

The parops are all "aliases", in other words you cannot globally define them with the exceptions of `variation$start` and `variation$end`.
If you define any of these as user-defined macros then the value of the macro will be used as the value of the parop for subsequent calls.

In the following, we will list some examples.

{%ch Simple constant text%}

This example shows a text used two times in the document.
This one does not have variable parts, the whole text is contant and has to appear the second time exactly the same.

{%sample/
{@variation (id=doubled_text)text that happens two times in the document}
{@variation (id=doubled_text)text that happens two times in the document}
%}

results in

{%output%}

{%ch Simple variable text%}

This example has some variable part in the text.
When the macro is used, the separator strings are removed.
That way the output will not contain the `<<` and `>>` characters.

{%sample/
{@variation (id=somany_text)text that happens <<some>> times in the document}
{@variation (id=somany_text)text that happens <<any>> times in the document}
%}

results in

{%output%}

NOTE: It is an error to have a start (`<<`) or end (`>>`) string in the text.
If you need to have any of them as part of the constant or variable part of the text, you should define alternatives using the parops `start` and `end` as demonstrated in the next example.

{%ch Alternative start and end strings%}

This example shows that you can define alternative start and end strings.
If it is defined in the first occurrence of the text in the document, it will be used for all subsequent occurrences.
Even in this case, start and end strings can be redefined in the subsequent calls, but those definitions are local.
Also, redefinition of these strings does not affect the `variation` macros with other identifiers.

{%sample/
{@variation (id=alter start=< end=>)text that happens <some> times in the document}
{@variation (id=alter)text that happens <any> times in the document}
{@variation (id=alter start=' end=')text that happens 'multiple' times in the document}
{@variation (id=alter)text that happens <nonce> times in the document}
{@variation (id=somany_text)text that happens <<some>> times in the document}
{@variation (id=somany_text)text that happens <<any>> times in the document}
%}

results in

{%output%}

{%ch Ignoring letter casing%}

This example shows how to use the `ignoreCase` parop.
When the comparison is done, the original text and the subsequent texts are compared ignoring the letter casing.
{%@variation (id=not_output start=[ end=])The actual output is not affected by this option.
[Using this option, you can use upper case or lower case letters without enclosing those characters into variable parts.]

This option is not inherited from the first occurrence of the text in the document.
It has to be applied in all subsequent uses that may differ from the first one in [letter casing].

Using this option in the first occurrence of the text is optional, but has no effect.%}

{%sample/
{@variation (id=abrakaDabra)text that happens <<some>> TIMES in the document}
{@variation (id=abrakaDabra ignoreCase)text that happens <<Some>> times in the document}
%}

will result in

{%output%}

{%ch Ignoring multiple spaces%}

This example demonstrates that the macro can ignore multiple spaces in the text.
Using the parop `ignoreSpace` you can define that multiple spaces in the text are treated as one.
Different white-space characters, like new-line, line-feed and so on are treated as ordinary space characters.
{%@variation (id=not_output)The actual output is not affected by this option.
[All the different space characters that you apply to the text will get into the output.]

This option is not inherited from the first occurrence of the text in the document.
It has to be applied in all subsequent uses that may differ from the first one in [spacing].

Using this option in the first occurrence of the text is optional, but has no effect.%}

{%sample/
{@variation (id=ignore_spc)text that happens
<<some>> times in         the document}
{@variation (id=ignore_spc ignoreSpace)text that happens <<Some>> times in the document}
%}

will result in

{%output%}

{%ch Ignoring spaces at the beginning and end of the text%}

{%sample/
.{@variation (id=trimmed trim)      this is trimmed only for the comparison}.
.{@variation (id=trimmed trim)  this is trimmed only for the comparison      }.
%}

will result in the following text:

{%output%}


{%ch Variable part is missing%}

When some variable part becomes an empty string, you can omit that part.
There is no need to write `<<>>` in the text.

You should be careful paying attention to multiple spaces as in the example below.

{%sample/
{@variation (id=missng)text that happens <<some times>> in the document}
{@variation (id=missng ignoreSpace)text that happens in the document}
%}

will result in:

{%output%}

{%ch Defining global start and end strings%}

The start and end string by default is `<<` and `>>`.
It is possible to define global start and end strings that will be used in all subsequent calls of the macro.
Note, however, that the macros that have already been defined will not be affected by the change.
In the example below the first call (1) to `variation` uses the default.
After this we set the user defined macros `variation$start` and `variation$end` to `[` and `]` respectively.
This will change any subsequent calls of `variation`, which create a _new_ text.
On line (2) we still use the default, even though the user defined macros are already defined.
The reason is that this inherits the default from the first call.
This inheritance is stronger than the user defined macros.

On line (3) we define a new variation text, and this time the start and end strings are `[` and `]`.
So are they on line (4).

{%sample/
{@variation (id=wuff) Here the <<variable>> part uses the default} (1)
{@define variation$start=[}\
{@define variation$end=]}\
{@variation (id=wuff) Here the <<changing>> part uses the default} (2)
{@variation (id=quackk) Here the [variable] part uses the newly defined} (3)
{@variation (id=quackk) Here the [changling] part uses the newly defined} (4)
{@variation (id=quackk start=' end=') Here the 'chang ling wong' part uses the newly defined} (5)
{@variation (id=quackk variation$start=' variation$end=') Here the [chang ling wong] part uses the newly defined} (6)
%}

will result in

{%output%}

NOTE: You can define the start and end string using the parops `start` and `end` as demonstrated in the example on line (5).
To do this, you must use the `start` and `end` aliases and not the `variation$start` and `variation$end` macro names.
As demonstrated on line (6), you can also use the `variation$start` and `variation$end` macro names, but they have no effect.
The reason is that the code puts the inherited strings in front of the strings defined by these names.


