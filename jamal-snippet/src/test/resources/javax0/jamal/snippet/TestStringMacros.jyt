"string:contains tests":
  Contains string:
    Input: "{@string:contains (text=alma) this is a string containing alma}"
    Output: "true" # note that this also has to be quoted, because whatever a macro returns can only be a string
  Does not contain a string:
    Input: "{@string:contains (text=alma) this is a string not containing ... ha ha ha}"
    Output: "false" # see the comment above
  Contains regex:
    Input: "{@string:contains (regex text=a.ma) this is a string containing akma}"
    Output: "true"
  Still contains a regex:
    Input: "{@string:contains (text=a..a regex) this is a string not containing ... ha ha ha}"
    Output: "true"
  Does not contain a regex:
    Input: "{@string:contains (text=\"^wuff$\" regex) this is a string not containing ... ha ha ha}"
    Output: "false"
  No text is an error:
    Input: "{@string:contains () this is a string not containing ... ha ha ha}"
    Throws: "The mandatory parameters 'text' or 'string' are missing for the macro 'string:contains'"

"string:substring tests":
  "get the whole when no begin and no end":
    Input: "{@string:substring /this is just the whole string}"
    Output: "this is just the whole string"
  "get the whole when no begin and no end with spaces at the start":
    Input: "{@string:substring () /this is just the whole string}"
    Output: "this is just the whole string"
  "get the whole when no begin and no end with spaces at the start and at the end":
    Input: "{@string:substring () /this is just the whole string  }"
    Output: "this is just the whole string  "
  "get a few character from the start":
    Input: "{@string:substring (begin=0 end=4) /this is just the whole string  }"
    Output: "this"
  "get a few character from the middle":
    Input: "{@string:substring (begin=1 end=5) / this is just the whole string  }"
    Output: "this"
  "get a few character from the end":
    Input: "{@string:substring (begin=-10) /this is just the whole string  }"
    Output: "e string  "
  "chop off the last character":
    Input: "{@string:substring (end=-1)/hokus pokuss}"
    Output: "hokus pokus"
  "get a few character with negative indexes":
    Input: "{@string:substring (begin=-10 end=-2) /this is just the whole string  }"
    Output: "e string"

"string length tests":
  "just get the length":
    Input: "{@string:length alma}"
    Output: "4" # note that this is a string. output is always string
  "just get the length with leading space":
    Input: "{@string:length() alma}" # this is not a "function" call with no argument. The () is an empty parameter list.
    Output: "5"
  "just get the length with leading space trimmed":
    Input: "{@string:length (trim left) alma }" # trim right, and left are booleans, it is enough if they are present
    Output: "5"
  "just get the length with trailing space trimmed":
    Input: "{@string:length (trim right) alma }"
    Output: "5"
  "just get the length with trailing and leading space trimmed explicitly":
    Input: "{@string:length (trim right left) alma }"
    Output: "4"
  "just get the length with trailing and leading space trimmed implicitly":
    Input: "{@string:length (trim) alma }"
    Output: "4"
  "left without trim":
    Input: "{@string:length (left) alma }"
    Throws: {%@define noTrim="You cannot use 'left' or 'right' on 'string:length' without trim"%}{%noTrim%}
  "right without trim":
    Input: "{@string:length (right) alma }"
    Throws: {%noTrim%}
  "left and right without trim":
    Input: "{@string:length (left right) alma }"
    Throws: {%noTrim%}

"string quoting":
  "quote strings":
    Input: "{@string:quote| \\ \t \b \n \r \f \"}"
    Output: " \\\\ \\t \\b \\n \\r \\f \\\""

"comparing strings":
    "strings equal":
      Input: "{@string:equals /abraka dabra/abraka dabra}"
      Output: "true"
    "strings not equal":
      Input: "{@string:equals /abraka dabre/abraka dabra}"
      Output: "false"
    "strings equal ignoring case":
      Input: "{@string:equals (ignoreCase) /abraka dabra/AbrAkA dAbrA}"
      Output: "true"
    "strings not equal ignore case":
      Input: "{@string:equals (ignoreCase) /abraka dabre/abraka dAbra}"
      Output: "false"

"string reversing":
    Input: "{@string:reverse /abraka dabra}"
    Output: "arbad akarba"

"starts and ends with tests":
    "starts with":
      Input: "{@string:startsWith /abraka dabra/abraka}"
      Output: "true"
    "does not start with":
      Input: "{@string:startsWith /abraka dabra/dabra}"
      Output: "false"
    "does not end with":
      Input: "{@string:endsWith /abraka dabra/abraka}"
      Output: "false"
    "ends with":
      Input: "{@string:endsWith /abraka dabra/dabra}"
      Output: "true"

"inline starts and ends with tests":
    "starts with":
      Input: "{@string /abraka dabra/startsWith/abraka}"
      Output: "true"
    "does not start with":
      Input: "{@string /abraka dabra/startsWith/dabra}"
      Output: "false"
    "does not end with":
      Input: "{@string /abraka dabra/endsWith/abraka}"
      Output: "false"
    "ends with":
      Input: "{@string /abraka dabra/endsWith/dabra}"
      Output: "true"
    "equals":
      Input: "{@string /abraka/equals/abraka}"
      Output: "true"
    "does not equal":
      Input: "{@string /abraka/equals/dabra}"
      Output: "false"
    "contains":
      Input: "{@string /abraka/contains/abrak}"
      Output: "true"
    "does not contain":
      Input: "{@string /abraka/contains/dabra}"
      Output: "false"
    "ignore case starts with":
      Input: "{@string (ignoreCase)/abraka dabra/startsWith/abRaka}"
      Output: "true"
    "ignore case does not start with":
      Input: "{@string (ignoreCase)/abraka dabra/startsWith/daBra}"
      Output: "false"
    "ignore case does not end with":
      Input: "{@string (ignoreCase)/abraka dabra/endsWith/abrBka}"
      Output: "false"
    "ignore case ends with":
      Input: "{@string (ignoreCase)/abraka dabra/endsWith/daBra}"
      Output: "true"
    "ignore case equals":
      Input: "{@string (ignoreCase)/abraka/equals/abRaka}"
      Output: "true"
    "ignore case does not equal":
      Input: "{@string (ignoreCase)/abraka/equals/dabRa}"
      Output: "false"
    "ignore case contains":
      Input: "{@string (ignoreCase)/abraka/contains/abRak}"
      Output: "true"
    "ignore case does not contain":
      Input: "{@string (ignoreCase)/abraka/contains/dabRa}"
      Output: "false"

"find string between":
  "simple between":
    Input: "{@string:between (after=a before=b)bacbdba}"
    Output: "cbd"
  "between only before":
    Input: "{@string:between (before=b)alabalabamba}"
    Output: "alabalabam"
  "between only after":
    Input: "{@string:between (after=a)alabalabamba}"
    Output: "labalabamba"
  "between before not found":
    Input: "{@string:between (after=a before=z)alabalabamba}"
    Output: ""
  "between after not found":
    Input: "{@string:between (after=z before=b)alabalabamba}"
    Output: ""
  "between before is smaller than after":
    Input: "{@string:between (after=nyanya before=tunya)tunya ez a nyanya}"
    Output: ""

"fromEnd find string before":
  "simple before":
    Input: "{@string:before (first=a fromEnd)bacbdba}"
    Throws: "You cannot use 'fromEnd' with 'first'. Simply use 'last'"
  "before the second":
    Input: "{@string:before (theSecond=a fromEnd)alabalabamba}"
    Output: "alabalab"
  "before the third":
    Input: "{@string:before (third=a fromEnd)alabalabamba}"
    Output: "alabal"
  "before the n-th":
    Input: "{@string:before (nth=a n=4 fromEnd)alabalabamba}"
    Output: "alab"
  "before the last":
    Input: "{@string:before (last=a fromEnd)alabalabamba}"
    Throws: "You cannot use 'fromEnd' with 'last'. Simply use 'first'"

"find string after":
  "simple after":
    Input: "{@string:after (first=a)bacbdba}"
    Output: "cbdba"
  "after the second":
    Input: "{@string:after (theSecond=a)alabalabamba}"
    Output: "balabamba"
  "after the third":
    Input: "{@string:after (third=a)alabalabamba}"
    Output: "labamba"
  "after the n-th":
    Input: "{@string:after (nth=a n=4)alabalabamba}"
    Output: "bamba"
  "after the last":
    Input: "{@string:after (last=a)alabalabamba}"
    Output: ""
    
"fromEnd find string before ignore case":
  "simple before":
    Input: "{@string:before (first=A ignoreCase fromEnd)bacbdba}"
    Throws: "You cannot use 'fromEnd' with 'first'. Simply use 'last'"
  "before the second":
    Input: "{@string:before (theSecond=A ignoreCase fromEnd)alabalabamba}"
    Output: "alabalab"
  "before the third":
    Input: "{@string:before (third=A ignoreCase fromEnd)alabalabamba}"
    Output: "alabal"
  "before the n-th":
    Input: "{@string:before (nth=A n=4 ignoreCase fromEnd)alabalabamba}"
    Output: "alab"
  "before the last":
    Input: "{@string:before (last=A ignoreCase fromEnd)alabalabamba}"
    Throws: "You cannot use 'fromEnd' with 'last'. Simply use 'first'"

"fromEnd find string after ignore case":
  "simple after":
    Input: "{@string:after (first=A ignoreCase fromEnd)bacbdba}"
    Throws: "You cannot use 'fromEnd' with 'first'. Simply use 'last'"
  "after the second":
    Input: "{@string:after (theSecond=A ignoreCase fromEnd)alabalabamba}"
    Output: "mba"
  "after the third":
    Input: "{@string:after (third=A ignoreCase fromEnd)alabalabamba}"
    Output: "bamba"
  "after the n-th":
    Input: "{@string:after (nth=A n=4 ignoreCase fromEnd)alabalabamba}"
    Output: "labamba"
  "after the last":
    Input: "{@string:after (last=A ignoreCase fromEnd)alabalabamba}"
    Throws: "You cannot use 'fromEnd' with 'last'. Simply use 'first'"

"find string before":
  "simple before":
    Input: "{@string:before (first=a)bacbdba}"
    Output: "b"
  "before the second":
    Input: "{@string:before (theSecond=a)alabalabamba}"
    Output: "al"
  "before the third":
    Input: "{@string:before (third=a)alabalabamba}"
    Output: "alab"
  "before the n-th":
    Input: "{@string:before (nth=a n=4)alabalabamba}"
    Output: "alabal"
  "before the last":
    Input: "{@string:before (last=a)alabalabamba}"
    Output: "alabalabamb"

"fromEnd find string after":
  "simple after":
    Input: "{@string:after (first=a fromEnd)bacbdba}"
    Throws: "You cannot use 'fromEnd' with 'first'. Simply use 'last'"
  "after the second":
    Input: "{@string:after (theSecond=a fromEnd)alabalabamba}"
    Output: "mba"
  "after the third":
    Input: "{@string:after (third=a fromEnd)alabalabamba}"
    Output: "bamba"
  "after the n-th":
    Input: "{@string:after (nth=a n=4 fromEnd)alabalabamba}"
    Output: "labamba"
  "after the last":
    Input: "{@string:after (last=a fromEnd)alabalabamba}"
    Throws: "You cannot use 'fromEnd' with 'last'. Simply use 'first'"

"find string before ignore case":
  "simple before":
    Input: "{@string:before (first=A ignoreCase)bacbdba}"
    Output: "b"
  "before the second":
    Input: "{@string:before (theSecond=A ignoreCase)alabalabamba}"
    Output: "al"
  "before the third":
    Input: "{@string:before (third=A ignoreCase)alabalabamba}"
    Output: "alab"
  "before the n-th":
    Input: "{@string:before (nth=A n=4 ignoreCase)alabalabamba}"
    Output: "alabal"
  "before the last":
    Input: "{@string:before (last=A ignoreCase)alabalabamba}"
    Output: "alabalabamb"

"find string after ignore case":
  "simple after":
    Input: "{@string:after (first=A ignoreCase)bacbdba}"
    Output: "cbdba"
  "after the second":
    Input: "{@string:after (theSecond=A ignoreCase)alabalabamba}"
    Output: "balabamba"
  "after the third":
    Input: "{@string:after (third=A ignoreCase)alabalabamba}"
    Output: "labamba"
  "after the n-th":
    Input: "{@string:after (nth=A n=4 ignoreCase)alabalabamba}"
    Output: "bamba"
  "after the last":
    Input: "{@string:after (last=A ignoreCase)alabalabamba}"
    Output: ""

"chopping the start and the end strings":
  "case sensitive":
    "chops off the .jam ending":
      Input: "{@string:chop (postfix=.jam)thisfile.txt.jam}"
      Output: "thisfile.txt"
    "chops off the prefix":
      Input: "{@string:chop (prefix=this)thisfile.txt.jam}"
      Output: "file.txt.jam"
    "chops off the prefix and postfix":
      Input: "{@string:chop (prefix=this postfix=.jam)thisfile.txt.jam}"
      Output: "file.txt"
  "case insensitive cases":
    "chops off the .jam ending":
      Input: "{@string:chop (ignoreCase postfix=.JAM)thisfile.txt.jam}"
      Output: "thisfile.txt"
    "chops off the prefix":
      Input: "{@string:chop (ignoreCase prefix=THIS)thisfile.txt.jam}"
      Output: "file.txt.jam"
    "chops off the prefix and postfix":
      Input: "{@string:chop (ignoreCase prefix=THIS postfix=.JAM)thisfile.txt.jam}"
      Output: "file.txt"
  "failure cases":
    "case sensitive":
      "the postfix is not there":
            Input: "{@string:chop (postfix=.jam)file.txt}"
            Output: "file.txt"
      "the prefix is not there":
            Input: "{@string:chop (prefix=this)file.txt}"
            Output: "file.txt"
      "the postfix is not there because of different case":
            Input: "{@string:chop (postfix=.jam)THISfile.txt.JAM}"
            Output: "THISfile.txt.JAM"
      "the prefix is not there because of different case":
            Input: "{@string:chop (prefix=this)THISfile.txt.JAM}"
            Output: "THISfile.txt.JAM"
    "case insensitive":
      "the postfix is not there":
            Input: "{@string:chop (ignoreCase postfix=.jam)file.txt}"
            Output: "file.txt"
      "the prefix is not there":
            Input: "{@string:chop (ignoreCase prefix=this)file.txt}"
            Output: "file.txt"
