= Jamal Python Macros
{%@import res:jamal.jim%}{%@define PYTHON_MACRO=`{@python ...}`%}\
{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

Python integration module for

This macro package can be used to create built-in macros defined in Python.
A Python defined macro is a function ``def``-ined.
The name of the macro is the name of the function.
The function gets one ``str`` argument.
The result of the macro is what the function prints to the standard output.

For example:
{%@comment We have to run the pyton samples in isolated processes, because the
used output command in Jamal:jamal closes the processor and that way kills the Python process.
It is not feasible to change the output macro, because it is also used to demonstrate full processing
that shows the effect of closing, what happens at the end of the process.

This way each {output} call will span a new python interpreter. A bit slow, but bearable.
%}
{%@option isolatedOutput%}{%@define Boaaaa=Boaaaa%}
{%#def simple_sample={%sample/
{@python
def chubakka(input):
    print("Chubakka says: " + input, end='')
}
{@chubakka {%Boaaaa%}}
%}%}

will result in:

{%output%}

To successfully use this macro, you must have a Python interpreter installed.

The macro package is part of the

[source,xml]
----
<dependency>
    <groupId>com.javax0.jamal</groupId>
    <artifactId>{%pom /project/artifactId/text()%}</artifactId>
    <version>{%VERSION%}</version>
</dependency>
----

macro package, but it is also part of the standard builds, so you can just use it in IntelliJ, AsciidocFX or on the command line etc.

== Macros Implemented

{%@snip:collect from=src/main/ exclude=.DS%}

=== `python`

The macro `python` is used to define a Jamal built-in macro using Python.
For example, the following call will define the built-in macro ``chubakka``.

{%simple_sample%}

The first line of the code

    {%#ranges range=5
{%simple_sample%}%}

defines a function.
The function name is the macro name.
The parameter `input` is a string (``str``), which follows the macro name, in the example above `{%Boaaaa%}`.
The result of the macro is what the Python code prints to the standard output for both the `@python` and the created new macro.

[NOTE]
====
The regular expression to find the name of the macro is

  {%@snip PYTHON_START_REGEX /"(.*)"/%}

====

Sometimes you cannot rely on the Python code structure to let the macro figure out the macro and function name.
You may even want to have the name different.
In that case you can use the `id` and `function` parops.
Using `id` or `id ` and `function` together will skip the pattern matching seeking for function head.

{%sample/
{@python (id=OO7 function=agent)
# This is a code that has many methods, and thus we cannot use the built-in pattern mathcing
def name():
    print(" Bond",end='')
def agent(txt):
    name()
    print(",",txt,end='')
    name()
print("done")
}{@OO7 James}%}

will result in

{%output%}

As you can see the macro `@python` executes the code and the result is the output of the code.

The reference list of the parops for this macro is the following:

{%#replaceLines replace="~\\s*//\\s*~~" replace="/^.*?\"(.*)\".*/* `$1`/" replace="/\",\\s*\"/`, alias `/"
{%@snip PYTHON_PAROPS%}%}

== Python Location

To use these macros, there must be an installed Python interpreter on the system.
The macro will try to locate the interpreter searching on well-known locations.

If there are multiple interpreters available, it will select the one with the highest version.
If there are multiple interpreters of the same version, the first found will be used.

These locations are the following:

=== Windows

{%#replaceLines replace="/\"//" replace="/,//" replace="/System.getenv\\((.*)\\)/$1/"
{%@snip windows_locations_list%}%}

=== macOS

{%#replaceLines replace="/\"//" replace="/,//"
{%@snip mac_locations_list%}%}


=== Linux

{%#replaceLines replace="/\"//" replace="/,//"
{%@snip linux_locations_list%}%}


=== Common

If the above operating-system specific locations fail, then the code will try

* `python3`,
* `python`,
* `py`

from the PATH.

=== Configuration

If the environment variable ``{%@snip ENV_JAMAL_PYTHON_INTERPRETER%}`` is defined then the value of it will be used and the whole search for Python interpreter is skipped.
It is recommended to configure the interpreter this way because the search can use significant processing power starting the different interpreters as separate processes querying their version.

=== Security

Executing arbitrary Python programs when opening a document without restrictions can be risky.
You might download an untrusted document:

* from a website,
* from a Git repository,
* or from an extracted archive.

You wouldn't want such documents to automatically execute Python code.
To prevent this, Python code will only run if a special approval file is present:

* in the directory containing the Jamal file with the {%PYTHON_MACRO%} macro, or
* in the project's root directory.

The name of this approval file is ``{%@def SENTINEL=.python.sentinel%}``.
It also has to have the security settings so that only the user can read the file.
In other words, the POSIX permission of the file has to be `0400`.
If the required file is missing or the permission is not as required the {%PYTHON_MACRO%} macro will result in an error message.

This message will include the necessary commands to create the file on your system.
For example:

.Sample error message when editing this document (path edited)
[source,text]
----
Approval file does not exist: Approval file required at: touch /Users/.../jamal/jamal-py/{%SENTINEL%}; chmod 400 /Users/.../jamal/jamal-py/{%SENTINEL%}
       or
touch /Users/.../jamal/{%SENTINEL%}; chmod 400 /Users/.../jamal/{%SENTINEL%}
----

The error message specifies the required file name and instructs you to set the correct file permissions.
The approval file must have POSIX permissions set to `+0400+`, ensuring that only the file owner can read it.
If the permission differs, the {%PYTHON_MACRO%} macro will not function.

Enforcing this permission safeguards users when deploying a downloaded project in the same directory, preventing unauthorized execution.
Actions like checking out a Git repository or extracting an archive typically do not set permissions to `0400`, adding an extra layer of security.
